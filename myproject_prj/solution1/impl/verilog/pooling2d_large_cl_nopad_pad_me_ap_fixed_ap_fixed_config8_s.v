// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pooling2d_large_cl_nopad_pad_me_ap_fixed_ap_fixed_config8_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        data_V_V_dout,
        data_V_V_empty_n,
        data_V_V_read,
        res_V_V_din,
        res_V_V_full_n,
        res_V_V_write
);

parameter    ap_ST_fsm_state1 = 30'd1;
parameter    ap_ST_fsm_state2 = 30'd2;
parameter    ap_ST_fsm_state3 = 30'd4;
parameter    ap_ST_fsm_state4 = 30'd8;
parameter    ap_ST_fsm_state5 = 30'd16;
parameter    ap_ST_fsm_state6 = 30'd32;
parameter    ap_ST_fsm_state7 = 30'd64;
parameter    ap_ST_fsm_state8 = 30'd128;
parameter    ap_ST_fsm_state9 = 30'd256;
parameter    ap_ST_fsm_state10 = 30'd512;
parameter    ap_ST_fsm_state11 = 30'd1024;
parameter    ap_ST_fsm_state12 = 30'd2048;
parameter    ap_ST_fsm_state13 = 30'd4096;
parameter    ap_ST_fsm_state14 = 30'd8192;
parameter    ap_ST_fsm_state15 = 30'd16384;
parameter    ap_ST_fsm_state16 = 30'd32768;
parameter    ap_ST_fsm_state17 = 30'd65536;
parameter    ap_ST_fsm_state18 = 30'd131072;
parameter    ap_ST_fsm_state19 = 30'd262144;
parameter    ap_ST_fsm_state20 = 30'd524288;
parameter    ap_ST_fsm_state21 = 30'd1048576;
parameter    ap_ST_fsm_state22 = 30'd2097152;
parameter    ap_ST_fsm_state23 = 30'd4194304;
parameter    ap_ST_fsm_state24 = 30'd8388608;
parameter    ap_ST_fsm_state25 = 30'd16777216;
parameter    ap_ST_fsm_state26 = 30'd33554432;
parameter    ap_ST_fsm_state27 = 30'd67108864;
parameter    ap_ST_fsm_state28 = 30'd134217728;
parameter    ap_ST_fsm_state29 = 30'd268435456;
parameter    ap_ST_fsm_state30 = 30'd536870912;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] data_V_V_dout;
input   data_V_V_empty_n;
output   data_V_V_read;
output  [31:0] res_V_V_din;
input   res_V_V_full_n;
output   res_V_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg data_V_V_read;
reg res_V_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [29:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg   [1023:0] layer_in_V_23;
reg   [31:0] sX;
reg   [31:0] sY;
reg   [31:0] pY;
reg   [31:0] pX;
reg    data_V_V_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln484_fu_225_p2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
reg    res_V_V_blk_n;
wire    ap_CS_fsm_state19;
wire   [0:0] icmp_ln512_fu_846_p2;
wire   [11:0] i_ih_fu_231_p2;
reg   [11:0] i_ih_reg_998;
reg    ap_block_state2;
reg   [31:0] tmp_V_65_reg_1003;
reg   [31:0] tmp_V_66_reg_1008;
reg   [31:0] tmp_V_67_reg_1013;
reg   [31:0] tmp_V_68_reg_1018;
reg   [31:0] tmp_V_69_reg_1023;
reg   [31:0] tmp_V_70_reg_1028;
reg   [31:0] tmp_V_71_reg_1033;
reg   [31:0] sX_load_reg_1038;
wire   [0:0] icmp_ln498_fu_247_p2;
reg   [0:0] icmp_ln498_reg_1043;
reg   [31:0] sY_load_reg_1048;
wire   [0:0] icmp_ln498_1_fu_257_p2;
reg   [0:0] icmp_ln498_1_reg_1053;
reg   [31:0] pY_load_reg_1058;
reg   [31:0] pX_load_reg_1064;
wire   [0:0] and_ln498_2_fu_295_p2;
reg   [0:0] and_ln498_2_reg_1070;
wire   [3:0] i1_fu_307_p2;
reg   [3:0] i1_reg_1077;
wire    ap_CS_fsm_state10;
reg   [1023:0] layer_in_V_23_load_1_reg_1082;
wire   [0:0] icmp_ln500_fu_301_p2;
wire   [1023:0] select_ln203_1_fu_381_p3;
reg   [1023:0] select_ln203_1_reg_1088;
wire   [10:0] select_ln203_2_fu_389_p3;
reg   [10:0] select_ln203_2_reg_1093;
wire   [10:0] sub_ln203_2_fu_397_p2;
reg   [10:0] sub_ln203_2_reg_1098;
wire   [3:0] xor_ln203_fu_403_p2;
reg   [3:0] xor_ln203_reg_1103;
reg   [1023:0] tmp_5_fu_409_p4;
reg   [1023:0] tmp_5_reg_1108;
wire   [1023:0] select_ln203_7_fu_485_p3;
reg   [1023:0] select_ln203_7_reg_1113;
wire   [10:0] select_ln203_8_fu_493_p3;
reg   [10:0] select_ln203_8_reg_1118;
wire   [10:0] sub_ln203_8_fu_501_p2;
reg   [10:0] sub_ln203_8_reg_1123;
reg   [1023:0] tmp_7_fu_507_p4;
reg   [1023:0] tmp_7_reg_1128;
wire   [0:0] icmp_ln522_fu_517_p2;
reg   [0:0] icmp_ln522_reg_1133;
wire   [31:0] select_ln537_fu_538_p3;
reg   [31:0] select_ln537_reg_1137;
wire   [31:0] select_ln532_fu_578_p3;
reg   [31:0] select_ln532_reg_1145;
wire   [0:0] icmp_ln526_fu_557_p2;
wire    ap_CS_fsm_state11;
wire   [1023:0] select_ln203_4_fu_652_p3;
reg   [1023:0] select_ln203_4_reg_1155;
wire   [10:0] select_ln203_5_fu_658_p3;
reg   [10:0] select_ln203_5_reg_1160;
wire   [10:0] sub_ln203_5_fu_666_p2;
reg   [10:0] sub_ln203_5_reg_1165;
wire   [1023:0] select_ln203_10_fu_728_p3;
reg   [1023:0] select_ln203_10_reg_1175;
wire   [10:0] select_ln203_11_fu_734_p3;
reg   [10:0] select_ln203_11_reg_1180;
wire   [10:0] sub_ln203_11_fu_742_p2;
reg   [10:0] sub_ln203_11_reg_1185;
wire    ap_CS_fsm_state12;
wire   [1023:0] grp_fu_594_p2;
reg   [1023:0] lshr_ln203_reg_1200;
wire    ap_CS_fsm_state16;
wire   [1023:0] grp_fu_675_p2;
reg   [1023:0] lshr_ln203_4_reg_1205;
wire   [31:0] pool_res_V_fu_778_p1;
reg   [31:0] pool_res_V_reg_1210;
wire    ap_CS_fsm_state17;
wire   [1023:0] grp_fu_751_p2;
reg   [1023:0] lshr_ln203_2_reg_1216;
wire   [31:0] trunc_ln203_2_fu_796_p1;
reg   [31:0] trunc_ln203_2_reg_1221;
wire   [1023:0] grp_fu_759_p2;
reg   [1023:0] lshr_ln203_6_reg_1226;
wire   [127:0] pool_V_fu_836_p5;
reg   [127:0] pool_V_reg_1231;
wire    ap_CS_fsm_state18;
wire   [127:0] select_ln1494_1_fu_919_p3;
reg   [127:0] select_ln1494_1_reg_1240;
reg    ap_block_state19;
wire   [7:0] select_ln1494_2_fu_926_p3;
reg   [7:0] select_ln1494_2_reg_1245;
wire   [7:0] sub_ln1494_2_fu_934_p2;
reg   [7:0] sub_ln1494_2_reg_1250;
wire   [2:0] i_fu_940_p2;
reg   [2:0] i_reg_1255;
wire    ap_CS_fsm_state20;
wire   [127:0] grp_fu_949_p2;
reg   [127:0] lshr_ln1494_reg_1265;
wire    ap_CS_fsm_state25;
wire   [31:0] trunc_ln1494_fu_968_p1;
reg   [31:0] trunc_ln1494_reg_1270;
wire    ap_CS_fsm_state26;
wire   [31:0] pool_res_V_1_fu_977_p3;
wire    ap_CS_fsm_state27;
reg    call_ret_cnnshift_arr_ap_fixed_ap_fixed_32_16_5_3_0_config8_s_fu_190_ap_start;
wire    call_ret_cnnshift_arr_ap_fixed_ap_fixed_32_16_5_3_0_config8_s_fu_190_ap_done;
wire    call_ret_cnnshift_arr_ap_fixed_ap_fixed_32_16_5_3_0_config8_s_fu_190_ap_idle;
wire    call_ret_cnnshift_arr_ap_fixed_ap_fixed_32_16_5_3_0_config8_s_fu_190_ap_ready;
wire   [1023:0] call_ret_cnnshift_arr_ap_fixed_ap_fixed_32_16_5_3_0_config8_s_fu_190_ap_return;
reg   [11:0] i_ih_0_reg_135;
reg    ap_block_state1;
wire    ap_CS_fsm_state30;
reg   [3:0] i1_0_reg_146;
reg   [31:0] tmp_V_reg_157;
reg   [2:0] i_0_reg_168;
reg   [31:0] storemerge_reg_179;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state28;
wire   [31:0] add_ln530_fu_562_p2;
wire   [31:0] add_ln535_fu_522_p2;
wire   [0:0] icmp_ln498_2_fu_267_p2;
wire   [0:0] icmp_ln498_3_fu_277_p2;
wire   [0:0] and_ln498_1_fu_289_p2;
wire   [0:0] and_ln498_fu_283_p2;
wire   [2:0] empty_93_fu_313_p1;
wire   [7:0] tmp_2_fu_317_p3;
wire   [7:0] empty_94_fu_325_p2;
wire   [10:0] zext_ln203_fu_337_p1;
wire   [10:0] zext_ln203_1_fu_341_p1;
wire   [0:0] icmp_ln203_fu_331_p2;
wire   [10:0] sub_ln203_fu_355_p2;
wire   [10:0] sub_ln203_1_fu_367_p2;
reg   [1023:0] tmp_1_fu_345_p4;
wire   [10:0] xor_ln203_1_fu_361_p2;
wire   [10:0] select_ln203_fu_373_p3;
wire   [9:0] tmp_4_fu_419_p4;
wire   [9:0] empty_96_fu_429_p2;
wire   [10:0] zext_ln203_8_fu_441_p1;
wire   [10:0] zext_ln203_9_fu_445_p1;
wire   [0:0] icmp_ln203_2_fu_435_p2;
wire   [10:0] sub_ln203_6_fu_459_p2;
wire   [10:0] sub_ln203_7_fu_471_p2;
reg   [1023:0] tmp_6_fu_449_p4;
wire   [10:0] xor_ln203_3_fu_465_p2;
wire   [10:0] select_ln203_6_fu_477_p3;
wire   [31:0] add_ln537_fu_533_p2;
wire   [31:0] add_ln532_fu_573_p2;
wire   [1023:0] grp_fu_594_p1;
wire  signed [8:0] tmp_3_fu_599_p3;
wire  signed [8:0] empty_95_fu_606_p2;
wire   [10:0] zext_ln203_4_fu_618_p1;
wire   [10:0] zext_ln203_5_fu_622_p1;
wire   [0:0] icmp_ln203_1_fu_612_p2;
wire   [10:0] sub_ln203_3_fu_626_p2;
wire   [10:0] sub_ln203_4_fu_638_p2;
wire   [10:0] xor_ln203_2_fu_632_p2;
wire   [10:0] select_ln203_3_fu_644_p3;
wire   [1023:0] grp_fu_675_p1;
wire  signed [9:0] empty_97_fu_680_p1;
wire  signed [9:0] p_cast1_fu_684_p1;
wire   [10:0] zext_ln203_12_fu_694_p1;
wire   [10:0] zext_ln203_13_fu_698_p1;
wire   [0:0] icmp_ln203_3_fu_688_p2;
wire   [10:0] sub_ln203_9_fu_702_p2;
wire   [10:0] sub_ln203_10_fu_714_p2;
wire   [10:0] xor_ln203_4_fu_708_p2;
wire   [10:0] select_ln203_9_fu_720_p3;
wire   [1023:0] grp_fu_751_p1;
wire   [1023:0] grp_fu_759_p1;
wire   [1023:0] zext_ln203_3_fu_764_p1;
wire   [1023:0] lshr_ln203_1_fu_767_p2;
wire   [1023:0] and_ln203_fu_773_p2;
wire   [1023:0] zext_ln203_11_fu_782_p1;
wire   [1023:0] lshr_ln203_5_fu_785_p2;
wire   [1023:0] and_ln203_2_fu_791_p2;
wire   [1023:0] zext_ln203_7_fu_800_p1;
wire   [1023:0] lshr_ln203_3_fu_803_p2;
wire   [1023:0] and_ln203_1_fu_809_p2;
wire   [1023:0] zext_ln203_15_fu_818_p1;
wire   [1023:0] lshr_ln203_7_fu_821_p2;
wire   [1023:0] and_ln203_3_fu_827_p2;
wire   [31:0] trunc_ln203_3_fu_832_p1;
wire   [31:0] trunc_ln203_1_fu_814_p1;
wire   [1:0] empty_99_fu_852_p1;
wire   [6:0] tmp_s_fu_856_p3;
wire   [6:0] empty_100_fu_864_p2;
wire   [7:0] zext_ln1494_fu_876_p1;
wire   [7:0] zext_ln1494_1_fu_880_p1;
wire   [0:0] icmp_ln1494_1_fu_870_p2;
wire   [7:0] sub_ln1494_fu_893_p2;
wire   [7:0] sub_ln1494_1_fu_905_p2;
reg   [127:0] tmp_8_fu_884_p4;
wire   [7:0] xor_ln1494_fu_899_p2;
wire   [7:0] select_ln1494_fu_911_p3;
wire   [127:0] grp_fu_949_p1;
wire   [127:0] zext_ln1494_3_fu_954_p1;
wire   [127:0] lshr_ln1494_1_fu_957_p2;
wire   [127:0] and_ln1494_fu_963_p2;
wire   [0:0] icmp_ln1494_fu_972_p2;
reg   [29:0] ap_NS_fsm;
reg    ap_condition_224;
reg    ap_condition_396;
reg    ap_condition_235;
reg    ap_condition_389;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 30'd1;
#0 layer_in_V_23 = 1024'd0;
#0 sX = 32'd0;
#0 sY = 32'd0;
#0 pY = 32'd0;
#0 pX = 32'd0;
end

cnnshift_arr_ap_fixed_ap_fixed_32_16_5_3_0_config8_s call_ret_cnnshift_arr_ap_fixed_ap_fixed_32_16_5_3_0_config8_s_fu_190(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(call_ret_cnnshift_arr_ap_fixed_ap_fixed_32_16_5_3_0_config8_s_fu_190_ap_start),
    .ap_done(call_ret_cnnshift_arr_ap_fixed_ap_fixed_32_16_5_3_0_config8_s_fu_190_ap_done),
    .ap_idle(call_ret_cnnshift_arr_ap_fixed_ap_fixed_32_16_5_3_0_config8_s_fu_190_ap_idle),
    .ap_ready(call_ret_cnnshift_arr_ap_fixed_ap_fixed_32_16_5_3_0_config8_s_fu_190_ap_ready),
    .data_0_V_read(tmp_V_65_reg_1003),
    .data_1_V_read(tmp_V_66_reg_1008),
    .data_2_V_read(tmp_V_67_reg_1013),
    .data_3_V_read(tmp_V_68_reg_1018),
    .data_4_V_read(tmp_V_69_reg_1023),
    .data_5_V_read(tmp_V_70_reg_1028),
    .data_6_V_read(tmp_V_71_reg_1033),
    .data_7_V_read(data_V_V_dout),
    .output_V_read(layer_in_V_23),
    .ap_return(call_ret_cnnshift_arr_ap_fixed_ap_fixed_32_16_5_3_0_config8_s_fu_190_ap_return)
);

myproject_axi_lshr_1024ns_11ns_1024_6_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .OP( 1 ),
    .din0_WIDTH( 1024 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 1024 ))
myproject_axi_lshr_1024ns_11ns_1024_6_1_U39(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(select_ln203_1_reg_1088),
    .din1(grp_fu_594_p1),
    .ce(1'b1),
    .dout(grp_fu_594_p2)
);

myproject_axi_lshr_1024ns_11ns_1024_6_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .OP( 1 ),
    .din0_WIDTH( 1024 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 1024 ))
myproject_axi_lshr_1024ns_11ns_1024_6_1_U40(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(select_ln203_7_reg_1113),
    .din1(grp_fu_675_p1),
    .ce(1'b1),
    .dout(grp_fu_675_p2)
);

myproject_axi_lshr_1024ns_11ns_1024_6_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .OP( 1 ),
    .din0_WIDTH( 1024 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 1024 ))
myproject_axi_lshr_1024ns_11ns_1024_6_1_U41(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(select_ln203_4_reg_1155),
    .din1(grp_fu_751_p1),
    .ce(1'b1),
    .dout(grp_fu_751_p2)
);

myproject_axi_lshr_1024ns_11ns_1024_6_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .OP( 1 ),
    .din0_WIDTH( 1024 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 1024 ))
myproject_axi_lshr_1024ns_11ns_1024_6_1_U42(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(select_ln203_10_reg_1175),
    .din1(grp_fu_759_p1),
    .ce(1'b1),
    .dout(grp_fu_759_p2)
);

myproject_axi_lshr_128ns_8ns_128_6_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .OP( 1 ),
    .din0_WIDTH( 128 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 128 ))
myproject_axi_lshr_128ns_8ns_128_6_1_U43(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(select_ln1494_1_reg_1240),
    .din1(grp_fu_949_p1),
    .ce(1'b1),
    .dout(grp_fu_949_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((icmp_ln484_fu_225_p2 == 1'd0) & (data_V_V_empty_n == 1'b0)) & (icmp_ln484_fu_225_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((data_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state9) & (1'd1 == and_ln498_2_fu_295_p2))) begin
        i1_0_reg_146 <= 4'd0;
    end else if ((~((res_V_V_full_n == 1'b0) & (icmp_ln512_fu_846_p2 == 1'd1)) & (1'b1 == ap_CS_fsm_state19) & (icmp_ln512_fu_846_p2 == 1'd1))) begin
        i1_0_reg_146 <= i1_reg_1077;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        i_0_reg_168 <= i_reg_1255;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        i_0_reg_168 <= 3'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        i_ih_0_reg_135 <= i_ih_reg_998;
    end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_ih_0_reg_135 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        if ((1'b1 == ap_condition_396)) begin
            pX <= 32'd0;
        end else if ((1'b1 == ap_condition_224)) begin
            pX <= add_ln535_fu_522_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        if ((1'b1 == ap_condition_389)) begin
            pY <= 32'd0;
        end else if ((1'b1 == ap_condition_235)) begin
            pY <= add_ln530_fu_562_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        sX <= select_ln537_reg_1137;
    end else if (((1'b1 == ap_CS_fsm_state10) & (((1'd0 == and_ln498_2_reg_1070) & (icmp_ln522_fu_517_p2 == 1'd1)) | ((icmp_ln522_fu_517_p2 == 1'd1) & (icmp_ln500_fu_301_p2 == 1'd1))))) begin
        sX <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (((1'd0 == and_ln498_2_reg_1070) & (icmp_ln526_fu_557_p2 == 1'd1) & (icmp_ln522_fu_517_p2 == 1'd1)) | ((icmp_ln526_fu_557_p2 == 1'd1) & (icmp_ln522_fu_517_p2 == 1'd1) & (icmp_ln500_fu_301_p2 == 1'd1))))) begin
        storemerge_reg_179 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        storemerge_reg_179 <= select_ln532_reg_1145;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        tmp_V_reg_157 <= pool_res_V_1_fu_977_p3;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        tmp_V_reg_157 <= pool_res_V_reg_1210;
    end
end

always @ (posedge ap_clk) begin
    if (((data_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        and_ln498_2_reg_1070 <= and_ln498_2_fu_295_p2;
        icmp_ln498_1_reg_1053 <= icmp_ln498_1_fu_257_p2;
        icmp_ln498_reg_1043 <= icmp_ln498_fu_247_p2;
        layer_in_V_23 <= call_ret_cnnshift_arr_ap_fixed_ap_fixed_32_16_5_3_0_config8_s_fu_190_ap_return;
        pX_load_reg_1064 <= pX;
        pY_load_reg_1058 <= pY;
        sX_load_reg_1038 <= sX;
        sY_load_reg_1048 <= sY;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (1'd1 == and_ln498_2_reg_1070))) begin
        i1_reg_1077 <= i1_fu_307_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln484_fu_225_p2 == 1'd0) & (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        i_ih_reg_998 <= i_ih_fu_231_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((res_V_V_full_n == 1'b0) & (icmp_ln512_fu_846_p2 == 1'd1)) & (icmp_ln512_fu_846_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state19))) begin
        i_reg_1255 <= i_fu_940_p2;
        select_ln1494_1_reg_1240 <= select_ln1494_1_fu_919_p3;
        select_ln1494_2_reg_1245 <= select_ln1494_2_fu_926_p3;
        sub_ln1494_2_reg_1250[7 : 1] <= sub_ln1494_2_fu_934_p2[7 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & ((1'd0 == and_ln498_2_reg_1070) | (icmp_ln500_fu_301_p2 == 1'd1)))) begin
        icmp_ln522_reg_1133 <= icmp_ln522_fu_517_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln500_fu_301_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10) & (1'd1 == and_ln498_2_reg_1070))) begin
        layer_in_V_23_load_1_reg_1082 <= layer_in_V_23;
        select_ln203_1_reg_1088 <= select_ln203_1_fu_381_p3;
        select_ln203_2_reg_1093 <= select_ln203_2_fu_389_p3;
        select_ln203_7_reg_1113 <= select_ln203_7_fu_485_p3;
        select_ln203_8_reg_1118 <= select_ln203_8_fu_493_p3;
        sub_ln203_2_reg_1098[10 : 1] <= sub_ln203_2_fu_397_p2[10 : 1];
        sub_ln203_8_reg_1123[10 : 1] <= sub_ln203_8_fu_501_p2[10 : 1];
        tmp_5_reg_1108 <= tmp_5_fu_409_p4;
        tmp_7_reg_1128 <= tmp_7_fu_507_p4;
        xor_ln203_reg_1103 <= xor_ln203_fu_403_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        lshr_ln1494_reg_1265 <= grp_fu_949_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        lshr_ln203_2_reg_1216 <= grp_fu_751_p2;
        lshr_ln203_6_reg_1226 <= grp_fu_759_p2;
        pool_res_V_reg_1210 <= pool_res_V_fu_778_p1;
        trunc_ln203_2_reg_1221 <= trunc_ln203_2_fu_796_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        lshr_ln203_4_reg_1205 <= grp_fu_675_p2;
        lshr_ln203_reg_1200 <= grp_fu_594_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        pool_V_reg_1231 <= pool_V_fu_836_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state30) & (icmp_ln522_reg_1133 == 1'd1))) begin
        sY <= storemerge_reg_179;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        select_ln203_10_reg_1175 <= select_ln203_10_fu_728_p3;
        select_ln203_11_reg_1180 <= select_ln203_11_fu_734_p3;
        select_ln203_4_reg_1155 <= select_ln203_4_fu_652_p3;
        select_ln203_5_reg_1160 <= select_ln203_5_fu_658_p3;
        sub_ln203_11_reg_1185[10 : 1] <= sub_ln203_11_fu_742_p2[10 : 1];
        sub_ln203_5_reg_1165[10 : 1] <= sub_ln203_5_fu_666_p2[10 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (((icmp_ln526_fu_557_p2 == 1'd0) & (1'd0 == and_ln498_2_reg_1070) & (icmp_ln522_fu_517_p2 == 1'd1)) | ((icmp_ln526_fu_557_p2 == 1'd0) & (icmp_ln522_fu_517_p2 == 1'd1) & (icmp_ln500_fu_301_p2 == 1'd1))))) begin
        select_ln532_reg_1145 <= select_ln532_fu_578_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (((icmp_ln522_fu_517_p2 == 1'd0) & (1'd0 == and_ln498_2_reg_1070)) | ((icmp_ln522_fu_517_p2 == 1'd0) & (icmp_ln500_fu_301_p2 == 1'd1))))) begin
        select_ln537_reg_1137 <= select_ln537_fu_538_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln484_fu_225_p2 == 1'd0) & (data_V_V_empty_n == 1'b0)) & (icmp_ln484_fu_225_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_V_65_reg_1003 <= data_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((data_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_V_66_reg_1008 <= data_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((data_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_V_67_reg_1013 <= data_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((data_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        tmp_V_68_reg_1018 <= data_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((data_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        tmp_V_69_reg_1023 <= data_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((data_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
        tmp_V_70_reg_1028 <= data_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((data_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
        tmp_V_71_reg_1033 <= data_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        trunc_ln1494_reg_1270 <= trunc_ln1494_fu_968_p1;
    end
end

always @ (*) begin
    if ((~((icmp_ln484_fu_225_p2 == 1'd0) & (data_V_V_empty_n == 1'b0)) & (icmp_ln484_fu_225_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((data_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        call_ret_cnnshift_arr_ap_fixed_ap_fixed_32_16_5_3_0_config8_s_fu_190_ap_start = 1'b1;
    end else begin
        call_ret_cnnshift_arr_ap_fixed_ap_fixed_32_16_5_3_0_config8_s_fu_190_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | ((icmp_ln484_fu_225_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        data_V_V_blk_n = data_V_V_empty_n;
    end else begin
        data_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((data_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state3)) | (~((icmp_ln484_fu_225_p2 == 1'd0) & (data_V_V_empty_n == 1'b0)) & (icmp_ln484_fu_225_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((data_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state9)) | ((data_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state8)) | ((data_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state7)) | ((data_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state6)) | ((data_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state5)) | ((data_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state4)))) begin
        data_V_V_read = 1'b1;
    end else begin
        data_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln484_fu_225_p2 == 1'd0) & (data_V_V_empty_n == 1'b0)) & (icmp_ln484_fu_225_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) & (icmp_ln512_fu_846_p2 == 1'd1))) begin
        res_V_V_blk_n = res_V_V_full_n;
    end else begin
        res_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((res_V_V_full_n == 1'b0) & (icmp_ln512_fu_846_p2 == 1'd1)) & (1'b1 == ap_CS_fsm_state19) & (icmp_ln512_fu_846_p2 == 1'd1))) begin
        res_V_V_write = 1'b1;
    end else begin
        res_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((icmp_ln484_fu_225_p2 == 1'd0) & (data_V_V_empty_n == 1'b0)) & (icmp_ln484_fu_225_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((icmp_ln484_fu_225_p2 == 1'd0) & (data_V_V_empty_n == 1'b0)) & (icmp_ln484_fu_225_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((data_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((data_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((data_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((data_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((data_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((data_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((data_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (((1'd0 == and_ln498_2_reg_1070) & (icmp_ln526_fu_557_p2 == 1'd1) & (icmp_ln522_fu_517_p2 == 1'd1)) | ((icmp_ln526_fu_557_p2 == 1'd1) & (icmp_ln522_fu_517_p2 == 1'd1) & (icmp_ln500_fu_301_p2 == 1'd1))))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else if (((1'b1 == ap_CS_fsm_state10) & (((icmp_ln526_fu_557_p2 == 1'd0) & (1'd0 == and_ln498_2_reg_1070) & (icmp_ln522_fu_517_p2 == 1'd1)) | ((icmp_ln526_fu_557_p2 == 1'd0) & (icmp_ln522_fu_517_p2 == 1'd1) & (icmp_ln500_fu_301_p2 == 1'd1))))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else if (((1'b1 == ap_CS_fsm_state10) & (((icmp_ln522_fu_517_p2 == 1'd0) & (1'd0 == and_ln498_2_reg_1070)) | ((icmp_ln522_fu_517_p2 == 1'd0) & (icmp_ln500_fu_301_p2 == 1'd1))))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            if ((~((res_V_V_full_n == 1'b0) & (icmp_ln512_fu_846_p2 == 1'd1)) & (1'b1 == ap_CS_fsm_state19) & (icmp_ln512_fu_846_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else if ((~((res_V_V_full_n == 1'b0) & (icmp_ln512_fu_846_p2 == 1'd1)) & (icmp_ln512_fu_846_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln530_fu_562_p2 = (pY_load_reg_1058 + 32'd1);

assign add_ln532_fu_573_p2 = (sY_load_reg_1048 + 32'd1);

assign add_ln535_fu_522_p2 = (pX_load_reg_1064 + 32'd1);

assign add_ln537_fu_533_p2 = (sX_load_reg_1038 + 32'd1);

assign and_ln1494_fu_963_p2 = (lshr_ln1494_reg_1265 & lshr_ln1494_1_fu_957_p2);

assign and_ln203_1_fu_809_p2 = (lshr_ln203_3_fu_803_p2 & lshr_ln203_2_reg_1216);

assign and_ln203_2_fu_791_p2 = (lshr_ln203_5_fu_785_p2 & lshr_ln203_4_reg_1205);

assign and_ln203_3_fu_827_p2 = (lshr_ln203_7_fu_821_p2 & lshr_ln203_6_reg_1226);

assign and_ln203_fu_773_p2 = (lshr_ln203_reg_1200 & lshr_ln203_1_fu_767_p2);

assign and_ln498_1_fu_289_p2 = (icmp_ln498_3_fu_277_p2 & icmp_ln498_2_fu_267_p2);

assign and_ln498_2_fu_295_p2 = (and_ln498_fu_283_p2 & and_ln498_1_fu_289_p2);

assign and_ln498_fu_283_p2 = (icmp_ln498_fu_247_p2 & icmp_ln498_1_fu_257_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (real_start == 1'b0));
end

always @ (*) begin
    ap_block_state19 = ((res_V_V_full_n == 1'b0) & (icmp_ln512_fu_846_p2 == 1'd1));
end

always @ (*) begin
    ap_block_state2 = ((icmp_ln484_fu_225_p2 == 1'd0) & (data_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_condition_224 = (((icmp_ln522_fu_517_p2 == 1'd0) & (1'd0 == and_ln498_2_reg_1070)) | ((icmp_ln522_fu_517_p2 == 1'd0) & (icmp_ln500_fu_301_p2 == 1'd1)));
end

always @ (*) begin
    ap_condition_235 = (((icmp_ln526_fu_557_p2 == 1'd0) & (1'd0 == and_ln498_2_reg_1070) & (icmp_ln522_fu_517_p2 == 1'd1)) | ((icmp_ln526_fu_557_p2 == 1'd0) & (icmp_ln522_fu_517_p2 == 1'd1) & (icmp_ln500_fu_301_p2 == 1'd1)));
end

always @ (*) begin
    ap_condition_389 = (((1'd0 == and_ln498_2_reg_1070) & (icmp_ln526_fu_557_p2 == 1'd1) & (icmp_ln522_fu_517_p2 == 1'd1)) | ((icmp_ln526_fu_557_p2 == 1'd1) & (icmp_ln522_fu_517_p2 == 1'd1) & (icmp_ln500_fu_301_p2 == 1'd1)));
end

always @ (*) begin
    ap_condition_396 = (((1'd0 == and_ln498_2_reg_1070) & (icmp_ln522_fu_517_p2 == 1'd1)) | ((icmp_ln522_fu_517_p2 == 1'd1) & (icmp_ln500_fu_301_p2 == 1'd1)));
end

assign ap_ready = internal_ap_ready;

assign empty_100_fu_864_p2 = (tmp_s_fu_856_p3 | 7'd31);

assign empty_93_fu_313_p1 = i1_0_reg_146[2:0];

assign empty_94_fu_325_p2 = (tmp_2_fu_317_p3 | 8'd31);

assign empty_95_fu_606_p2 = (tmp_3_fu_599_p3 | 9'd31);

assign empty_96_fu_429_p2 = (tmp_4_fu_419_p4 | 10'd31);

assign empty_97_fu_680_p1 = tmp_3_fu_599_p3;

assign empty_99_fu_852_p1 = i_0_reg_168[1:0];

assign grp_fu_594_p1 = select_ln203_2_reg_1093;

assign grp_fu_675_p1 = select_ln203_8_reg_1118;

assign grp_fu_751_p1 = select_ln203_5_reg_1160;

assign grp_fu_759_p1 = select_ln203_11_reg_1180;

assign grp_fu_949_p1 = select_ln1494_2_reg_1245;

assign i1_fu_307_p2 = (i1_0_reg_146 + 4'd1);

assign i_fu_940_p2 = (3'd1 + i_0_reg_168);

assign i_ih_fu_231_p2 = (i_ih_0_reg_135 + 12'd1);

assign icmp_ln1494_1_fu_870_p2 = ((tmp_s_fu_856_p3 > empty_100_fu_864_p2) ? 1'b1 : 1'b0);

assign icmp_ln1494_fu_972_p2 = (($signed(trunc_ln1494_reg_1270) > $signed(tmp_V_reg_157)) ? 1'b1 : 1'b0);

assign icmp_ln203_1_fu_612_p2 = ((tmp_3_fu_599_p3 > empty_95_fu_606_p2) ? 1'b1 : 1'b0);

assign icmp_ln203_2_fu_435_p2 = ((tmp_4_fu_419_p4 > empty_96_fu_429_p2) ? 1'b1 : 1'b0);

assign icmp_ln203_3_fu_688_p2 = ((tmp_3_fu_599_p3 > empty_95_fu_606_p2) ? 1'b1 : 1'b0);

assign icmp_ln203_fu_331_p2 = ((tmp_2_fu_317_p3 > empty_94_fu_325_p2) ? 1'b1 : 1'b0);

assign icmp_ln484_fu_225_p2 = ((i_ih_0_reg_135 == 12'd3080) ? 1'b1 : 1'b0);

assign icmp_ln498_1_fu_257_p2 = ((sY == 32'd1) ? 1'b1 : 1'b0);

assign icmp_ln498_2_fu_267_p2 = (($signed(pY) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln498_3_fu_277_p2 = (($signed(pX) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln498_fu_247_p2 = ((sX == 32'd1) ? 1'b1 : 1'b0);

assign icmp_ln500_fu_301_p2 = ((i1_0_reg_146 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln512_fu_846_p2 = ((i_0_reg_168 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln522_fu_517_p2 = ((pX_load_reg_1064 == 32'd54) ? 1'b1 : 1'b0);

assign icmp_ln526_fu_557_p2 = ((pY_load_reg_1058 == 32'd55) ? 1'b1 : 1'b0);

assign lshr_ln1494_1_fu_957_p2 = 128'd340282366920938463463374607431768211455 >> zext_ln1494_3_fu_954_p1;

assign lshr_ln203_1_fu_767_p2 = 1024'd179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137215 >> zext_ln203_3_fu_764_p1;

assign lshr_ln203_3_fu_803_p2 = 1024'd179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137215 >> zext_ln203_7_fu_800_p1;

assign lshr_ln203_5_fu_785_p2 = 1024'd179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137215 >> zext_ln203_11_fu_782_p1;

assign lshr_ln203_7_fu_821_p2 = 1024'd179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137215 >> zext_ln203_15_fu_818_p1;

assign p_cast1_fu_684_p1 = empty_95_fu_606_p2;

assign pool_V_fu_836_p5 = {{{{trunc_ln203_3_fu_832_p1}, {trunc_ln203_2_reg_1221}}, {trunc_ln203_1_fu_814_p1}}, {pool_res_V_reg_1210}};

assign pool_res_V_1_fu_977_p3 = ((icmp_ln1494_fu_972_p2[0:0] === 1'b1) ? trunc_ln1494_reg_1270 : tmp_V_reg_157);

assign pool_res_V_fu_778_p1 = and_ln203_fu_773_p2[31:0];

assign res_V_V_din = tmp_V_reg_157;

assign select_ln1494_1_fu_919_p3 = ((icmp_ln1494_1_fu_870_p2[0:0] === 1'b1) ? tmp_8_fu_884_p4 : pool_V_reg_1231);

assign select_ln1494_2_fu_926_p3 = ((icmp_ln1494_1_fu_870_p2[0:0] === 1'b1) ? xor_ln1494_fu_899_p2 : zext_ln1494_fu_876_p1);

assign select_ln1494_fu_911_p3 = ((icmp_ln1494_1_fu_870_p2[0:0] === 1'b1) ? sub_ln1494_fu_893_p2 : sub_ln1494_1_fu_905_p2);

assign select_ln203_10_fu_728_p3 = ((icmp_ln203_3_fu_688_p2[0:0] === 1'b1) ? tmp_7_reg_1128 : layer_in_V_23_load_1_reg_1082);

assign select_ln203_11_fu_734_p3 = ((icmp_ln203_3_fu_688_p2[0:0] === 1'b1) ? xor_ln203_4_fu_708_p2 : zext_ln203_12_fu_694_p1);

assign select_ln203_1_fu_381_p3 = ((icmp_ln203_fu_331_p2[0:0] === 1'b1) ? tmp_1_fu_345_p4 : layer_in_V_23);

assign select_ln203_2_fu_389_p3 = ((icmp_ln203_fu_331_p2[0:0] === 1'b1) ? xor_ln203_1_fu_361_p2 : zext_ln203_fu_337_p1);

assign select_ln203_3_fu_644_p3 = ((icmp_ln203_1_fu_612_p2[0:0] === 1'b1) ? sub_ln203_3_fu_626_p2 : sub_ln203_4_fu_638_p2);

assign select_ln203_4_fu_652_p3 = ((icmp_ln203_1_fu_612_p2[0:0] === 1'b1) ? tmp_5_reg_1108 : layer_in_V_23_load_1_reg_1082);

assign select_ln203_5_fu_658_p3 = ((icmp_ln203_1_fu_612_p2[0:0] === 1'b1) ? xor_ln203_2_fu_632_p2 : zext_ln203_4_fu_618_p1);

assign select_ln203_6_fu_477_p3 = ((icmp_ln203_2_fu_435_p2[0:0] === 1'b1) ? sub_ln203_6_fu_459_p2 : sub_ln203_7_fu_471_p2);

assign select_ln203_7_fu_485_p3 = ((icmp_ln203_2_fu_435_p2[0:0] === 1'b1) ? tmp_6_fu_449_p4 : layer_in_V_23);

assign select_ln203_8_fu_493_p3 = ((icmp_ln203_2_fu_435_p2[0:0] === 1'b1) ? xor_ln203_3_fu_465_p2 : zext_ln203_8_fu_441_p1);

assign select_ln203_9_fu_720_p3 = ((icmp_ln203_3_fu_688_p2[0:0] === 1'b1) ? sub_ln203_9_fu_702_p2 : sub_ln203_10_fu_714_p2);

assign select_ln203_fu_373_p3 = ((icmp_ln203_fu_331_p2[0:0] === 1'b1) ? sub_ln203_fu_355_p2 : sub_ln203_1_fu_367_p2);

assign select_ln532_fu_578_p3 = ((icmp_ln498_1_reg_1053[0:0] === 1'b1) ? 32'd0 : add_ln532_fu_573_p2);

assign select_ln537_fu_538_p3 = ((icmp_ln498_reg_1043[0:0] === 1'b1) ? 32'd0 : add_ln537_fu_533_p2);

assign start_out = real_start;

assign sub_ln1494_1_fu_905_p2 = (zext_ln1494_1_fu_880_p1 - zext_ln1494_fu_876_p1);

assign sub_ln1494_2_fu_934_p2 = (8'd127 - select_ln1494_fu_911_p3);

assign sub_ln1494_fu_893_p2 = (zext_ln1494_fu_876_p1 - zext_ln1494_1_fu_880_p1);

assign sub_ln203_10_fu_714_p2 = (zext_ln203_13_fu_698_p1 - zext_ln203_12_fu_694_p1);

assign sub_ln203_11_fu_742_p2 = (11'd1023 - select_ln203_9_fu_720_p3);

assign sub_ln203_1_fu_367_p2 = (zext_ln203_1_fu_341_p1 - zext_ln203_fu_337_p1);

assign sub_ln203_2_fu_397_p2 = (11'd1023 - select_ln203_fu_373_p3);

assign sub_ln203_3_fu_626_p2 = (zext_ln203_4_fu_618_p1 - zext_ln203_5_fu_622_p1);

assign sub_ln203_4_fu_638_p2 = (zext_ln203_5_fu_622_p1 - zext_ln203_4_fu_618_p1);

assign sub_ln203_5_fu_666_p2 = (11'd1023 - select_ln203_3_fu_644_p3);

assign sub_ln203_6_fu_459_p2 = (zext_ln203_8_fu_441_p1 - zext_ln203_9_fu_445_p1);

assign sub_ln203_7_fu_471_p2 = (zext_ln203_9_fu_445_p1 - zext_ln203_8_fu_441_p1);

assign sub_ln203_8_fu_501_p2 = (11'd1023 - select_ln203_6_fu_477_p3);

assign sub_ln203_9_fu_702_p2 = (zext_ln203_12_fu_694_p1 - zext_ln203_13_fu_698_p1);

assign sub_ln203_fu_355_p2 = (zext_ln203_fu_337_p1 - zext_ln203_1_fu_341_p1);

integer ap_tvar_int_0;

always @ (layer_in_V_23) begin
    for (ap_tvar_int_0 = 1024 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 1023 - 0) begin
            tmp_1_fu_345_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_1_fu_345_p4[ap_tvar_int_0] = layer_in_V_23[1023 - ap_tvar_int_0];
        end
    end
end

assign tmp_2_fu_317_p3 = {{empty_93_fu_313_p1}, {5'd0}};

assign tmp_3_fu_599_p3 = {{xor_ln203_reg_1103}, {5'd0}};

assign tmp_4_fu_419_p4 = {{{{1'd1}, {i1_0_reg_146}}}, {5'd0}};

integer ap_tvar_int_1;

always @ (layer_in_V_23) begin
    for (ap_tvar_int_1 = 1024 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 1023 - 0) begin
            tmp_5_fu_409_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tmp_5_fu_409_p4[ap_tvar_int_1] = layer_in_V_23[1023 - ap_tvar_int_1];
        end
    end
end

integer ap_tvar_int_2;

always @ (layer_in_V_23) begin
    for (ap_tvar_int_2 = 1024 - 1; ap_tvar_int_2 >= 0; ap_tvar_int_2 = ap_tvar_int_2 - 1) begin
        if (ap_tvar_int_2 > 1023 - 0) begin
            tmp_6_fu_449_p4[ap_tvar_int_2] = 1'b0;
        end else begin
            tmp_6_fu_449_p4[ap_tvar_int_2] = layer_in_V_23[1023 - ap_tvar_int_2];
        end
    end
end

integer ap_tvar_int_3;

always @ (layer_in_V_23) begin
    for (ap_tvar_int_3 = 1024 - 1; ap_tvar_int_3 >= 0; ap_tvar_int_3 = ap_tvar_int_3 - 1) begin
        if (ap_tvar_int_3 > 1023 - 0) begin
            tmp_7_fu_507_p4[ap_tvar_int_3] = 1'b0;
        end else begin
            tmp_7_fu_507_p4[ap_tvar_int_3] = layer_in_V_23[1023 - ap_tvar_int_3];
        end
    end
end

integer ap_tvar_int_4;

always @ (pool_V_reg_1231) begin
    for (ap_tvar_int_4 = 128 - 1; ap_tvar_int_4 >= 0; ap_tvar_int_4 = ap_tvar_int_4 - 1) begin
        if (ap_tvar_int_4 > 127 - 0) begin
            tmp_8_fu_884_p4[ap_tvar_int_4] = 1'b0;
        end else begin
            tmp_8_fu_884_p4[ap_tvar_int_4] = pool_V_reg_1231[127 - ap_tvar_int_4];
        end
    end
end

assign tmp_s_fu_856_p3 = {{empty_99_fu_852_p1}, {5'd0}};

assign trunc_ln1494_fu_968_p1 = and_ln1494_fu_963_p2[31:0];

assign trunc_ln203_1_fu_814_p1 = and_ln203_1_fu_809_p2[31:0];

assign trunc_ln203_2_fu_796_p1 = and_ln203_2_fu_791_p2[31:0];

assign trunc_ln203_3_fu_832_p1 = and_ln203_3_fu_827_p2[31:0];

assign xor_ln1494_fu_899_p2 = (zext_ln1494_fu_876_p1 ^ 8'd127);

assign xor_ln203_1_fu_361_p2 = (zext_ln203_fu_337_p1 ^ 11'd1023);

assign xor_ln203_2_fu_632_p2 = (zext_ln203_4_fu_618_p1 ^ 11'd1023);

assign xor_ln203_3_fu_465_p2 = (zext_ln203_8_fu_441_p1 ^ 11'd1023);

assign xor_ln203_4_fu_708_p2 = (zext_ln203_12_fu_694_p1 ^ 11'd1023);

assign xor_ln203_fu_403_p2 = (i1_0_reg_146 ^ 4'd8);

assign zext_ln1494_1_fu_880_p1 = empty_100_fu_864_p2;

assign zext_ln1494_3_fu_954_p1 = sub_ln1494_2_reg_1250;

assign zext_ln1494_fu_876_p1 = tmp_s_fu_856_p3;

assign zext_ln203_11_fu_782_p1 = sub_ln203_8_reg_1123;

assign zext_ln203_12_fu_694_p1 = $unsigned(empty_97_fu_680_p1);

assign zext_ln203_13_fu_698_p1 = $unsigned(p_cast1_fu_684_p1);

assign zext_ln203_15_fu_818_p1 = sub_ln203_11_reg_1185;

assign zext_ln203_1_fu_341_p1 = empty_94_fu_325_p2;

assign zext_ln203_3_fu_764_p1 = sub_ln203_2_reg_1098;

assign zext_ln203_4_fu_618_p1 = $unsigned(tmp_3_fu_599_p3);

assign zext_ln203_5_fu_622_p1 = $unsigned(empty_95_fu_606_p2);

assign zext_ln203_7_fu_800_p1 = sub_ln203_5_reg_1165;

assign zext_ln203_8_fu_441_p1 = tmp_4_fu_419_p4;

assign zext_ln203_9_fu_445_p1 = empty_96_fu_429_p2;

assign zext_ln203_fu_337_p1 = tmp_2_fu_317_p3;

always @ (posedge ap_clk) begin
    sub_ln203_2_reg_1098[0] <= 1'b0;
    sub_ln203_8_reg_1123[0] <= 1'b0;
    sub_ln203_5_reg_1165[0] <= 1'b0;
    sub_ln203_11_reg_1185[0] <= 1'b0;
    sub_ln1494_2_reg_1250[0] <= 1'b0;
end

endmodule //pooling2d_large_cl_nopad_pad_me_ap_fixed_ap_fixed_config8_s
