// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dense_large_stream_me_ap_fixed_ap_fixed_config46_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        data_V_V_dout,
        data_V_V_empty_n,
        data_V_V_read,
        res_V_V_din,
        res_V_V_full_n,
        res_V_V_write
);

parameter    ap_ST_fsm_state1 = 34'd1;
parameter    ap_ST_fsm_state2 = 34'd2;
parameter    ap_ST_fsm_state3 = 34'd4;
parameter    ap_ST_fsm_state4 = 34'd8;
parameter    ap_ST_fsm_state5 = 34'd16;
parameter    ap_ST_fsm_state6 = 34'd32;
parameter    ap_ST_fsm_state7 = 34'd64;
parameter    ap_ST_fsm_state8 = 34'd128;
parameter    ap_ST_fsm_state9 = 34'd256;
parameter    ap_ST_fsm_state10 = 34'd512;
parameter    ap_ST_fsm_state11 = 34'd1024;
parameter    ap_ST_fsm_state12 = 34'd2048;
parameter    ap_ST_fsm_state13 = 34'd4096;
parameter    ap_ST_fsm_state14 = 34'd8192;
parameter    ap_ST_fsm_state15 = 34'd16384;
parameter    ap_ST_fsm_state16 = 34'd32768;
parameter    ap_ST_fsm_state17 = 34'd65536;
parameter    ap_ST_fsm_state18 = 34'd131072;
parameter    ap_ST_fsm_state19 = 34'd262144;
parameter    ap_ST_fsm_state20 = 34'd524288;
parameter    ap_ST_fsm_state21 = 34'd1048576;
parameter    ap_ST_fsm_state22 = 34'd2097152;
parameter    ap_ST_fsm_state23 = 34'd4194304;
parameter    ap_ST_fsm_state24 = 34'd8388608;
parameter    ap_ST_fsm_state25 = 34'd16777216;
parameter    ap_ST_fsm_state26 = 34'd33554432;
parameter    ap_ST_fsm_state27 = 34'd67108864;
parameter    ap_ST_fsm_state28 = 34'd134217728;
parameter    ap_ST_fsm_state29 = 34'd268435456;
parameter    ap_ST_fsm_state30 = 34'd536870912;
parameter    ap_ST_fsm_state31 = 34'd1073741824;
parameter    ap_ST_fsm_state32 = 34'd2147483648;
parameter    ap_ST_fsm_state33 = 34'd4294967296;
parameter    ap_ST_fsm_state34 = 34'd8589934592;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] data_V_V_dout;
input   data_V_V_empty_n;
output   data_V_V_read;
output  [31:0] res_V_V_din;
input   res_V_V_full_n;
output   res_V_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg data_V_V_read;
reg[31:0] res_V_V_din;
reg res_V_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [33:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    data_V_V_blk_n;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state34;
reg    res_V_V_blk_n;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state26;
reg   [31:0] tmp_V_reg_167;
wire    ap_CS_fsm_state2;
wire    grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_ready;
wire    grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_done;
reg   [31:0] tmp_V_32_reg_172;
reg   [31:0] tmp_V_33_reg_177;
reg   [31:0] tmp_V_34_reg_182;
reg   [31:0] tmp_V_35_reg_187;
reg   [31:0] tmp_V_36_reg_192;
reg   [31:0] tmp_V_37_reg_197;
reg   [31:0] tmp_V_38_reg_202;
reg   [31:0] tmp_V_39_reg_207;
reg   [31:0] tmp_V_40_reg_212;
reg   [31:0] tmp_V_41_reg_217;
reg   [31:0] tmp_V_42_reg_222;
reg   [31:0] tmp_V_43_reg_227;
reg   [31:0] tmp_V_44_reg_232;
reg   [31:0] tmp_V_45_reg_237;
reg   [31:0] tmp_V_46_reg_242;
reg   [31:0] tmp_V_47_reg_247;
reg   [31:0] tmp_V_48_reg_252;
reg   [31:0] tmp_V_49_reg_257;
reg   [31:0] tmp_V_50_reg_262;
reg   [31:0] tmp_V_51_reg_267;
reg   [31:0] tmp_V_52_reg_272;
reg   [31:0] tmp_V_53_reg_277;
reg   [31:0] tmp_V_54_reg_282;
reg   [31:0] tmp_V_55_reg_287;
reg   [31:0] tmp_V_56_reg_292;
reg   [31:0] tmp_V_57_reg_297;
reg   [31:0] tmp_V_58_reg_302;
reg   [31:0] tmp_V_59_reg_307;
reg   [31:0] tmp_V_60_reg_312;
reg   [31:0] tmp_V_61_reg_317;
reg   [31:0] tmp_V_62_reg_322;
wire    grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_start;
wire    grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_idle;
wire   [31:0] grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_0;
wire   [31:0] grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_1;
wire   [31:0] grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_2;
wire   [31:0] grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_3;
wire   [31:0] grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_4;
wire   [31:0] grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_5;
wire   [31:0] grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_6;
wire   [31:0] grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_7;
wire   [31:0] grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_8;
wire   [31:0] grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_9;
wire   [31:0] grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_10;
wire   [31:0] grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_11;
wire   [31:0] grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_12;
wire   [31:0] grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_13;
wire   [31:0] grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_14;
wire   [31:0] grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_15;
wire   [31:0] grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_16;
wire   [31:0] grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_17;
wire   [31:0] grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_18;
wire   [31:0] grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_19;
wire   [31:0] grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_20;
wire   [31:0] grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_21;
wire   [31:0] grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_22;
wire   [31:0] grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_23;
wire   [31:0] grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_24;
wire   [31:0] grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_25;
wire   [31:0] grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_26;
wire   [31:0] grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_27;
wire   [31:0] grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_28;
wire   [31:0] grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_29;
wire   [31:0] grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_30;
wire   [31:0] grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_31;
reg    grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_start_reg;
reg    ap_block_state1_ignore_call10;
reg    ap_block_state27;
reg    ap_block_state28;
reg    ap_block_state29;
reg    ap_block_state30;
reg    ap_block_state31;
reg    ap_block_state32;
reg    ap_block_state33;
reg    ap_block_state34;
reg   [33:0] ap_NS_fsm;
reg    ap_block_state1;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 34'd1;
#0 grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_start_reg = 1'b0;
end

dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_start),
    .ap_done(grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_done),
    .ap_idle(grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_idle),
    .ap_ready(grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_ready),
    .ap_return_0(grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_0),
    .ap_return_1(grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_1),
    .ap_return_2(grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_2),
    .ap_return_3(grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_3),
    .ap_return_4(grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_4),
    .ap_return_5(grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_5),
    .ap_return_6(grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_6),
    .ap_return_7(grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_7),
    .ap_return_8(grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_8),
    .ap_return_9(grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_9),
    .ap_return_10(grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_10),
    .ap_return_11(grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_11),
    .ap_return_12(grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_12),
    .ap_return_13(grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_13),
    .ap_return_14(grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_14),
    .ap_return_15(grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_15),
    .ap_return_16(grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_16),
    .ap_return_17(grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_17),
    .ap_return_18(grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_18),
    .ap_return_19(grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_19),
    .ap_return_20(grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_20),
    .ap_return_21(grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_21),
    .ap_return_22(grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_22),
    .ap_return_23(grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_23),
    .ap_return_24(grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_24),
    .ap_return_25(grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_25),
    .ap_return_26(grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_26),
    .ap_return_27(grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_27),
    .ap_return_28(grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_28),
    .ap_return_29(grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_29),
    .ap_return_30(grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_30),
    .ap_return_31(grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_31)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state34))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_start_reg <= 1'b0;
    end else begin
        if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_start_reg <= 1'b1;
        end else if ((grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_ready == 1'b1)) begin
            grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_V_32_reg_172 <= grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_1;
        tmp_V_33_reg_177 <= grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_2;
        tmp_V_34_reg_182 <= grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_3;
        tmp_V_35_reg_187 <= grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_4;
        tmp_V_36_reg_192 <= grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_5;
        tmp_V_37_reg_197 <= grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_6;
        tmp_V_38_reg_202 <= grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_7;
        tmp_V_39_reg_207 <= grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_8;
        tmp_V_40_reg_212 <= grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_9;
        tmp_V_41_reg_217 <= grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_10;
        tmp_V_42_reg_222 <= grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_11;
        tmp_V_43_reg_227 <= grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_12;
        tmp_V_44_reg_232 <= grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_13;
        tmp_V_45_reg_237 <= grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_14;
        tmp_V_46_reg_242 <= grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_15;
        tmp_V_47_reg_247 <= grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_16;
        tmp_V_48_reg_252 <= grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_17;
        tmp_V_49_reg_257 <= grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_18;
        tmp_V_50_reg_262 <= grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_19;
        tmp_V_51_reg_267 <= grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_20;
        tmp_V_52_reg_272 <= grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_21;
        tmp_V_53_reg_277 <= grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_22;
        tmp_V_54_reg_282 <= grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_23;
        tmp_V_55_reg_287 <= grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_24;
        tmp_V_56_reg_292 <= grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_25;
        tmp_V_57_reg_297 <= grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_26;
        tmp_V_58_reg_302 <= grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_27;
        tmp_V_59_reg_307 <= grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_28;
        tmp_V_60_reg_312 <= grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_29;
        tmp_V_61_reg_317 <= grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_30;
        tmp_V_62_reg_322 <= grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_31;
        tmp_V_reg_167 <= grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_return_0;
    end
end

always @ (*) begin
    if ((~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state34))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31))) begin
        data_V_V_blk_n = data_V_V_empty_n;
    end else begin
        data_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state29)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state28)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state27)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state34)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state33)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state32)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state31)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state30)))) begin
        data_V_V_read = 1'b1;
    end else begin
        data_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state34))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31))) begin
        res_V_V_blk_n = res_V_V_full_n;
    end else begin
        res_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state34))) begin
        res_V_V_din = tmp_V_62_reg_322;
    end else if ((~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state33))) begin
        res_V_V_din = tmp_V_61_reg_317;
    end else if ((~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state32))) begin
        res_V_V_din = tmp_V_60_reg_312;
    end else if ((~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state31))) begin
        res_V_V_din = tmp_V_59_reg_307;
    end else if ((~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state30))) begin
        res_V_V_din = tmp_V_58_reg_302;
    end else if ((~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state29))) begin
        res_V_V_din = tmp_V_57_reg_297;
    end else if ((~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state28))) begin
        res_V_V_din = tmp_V_56_reg_292;
    end else if ((~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state27))) begin
        res_V_V_din = tmp_V_55_reg_287;
    end else if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state26))) begin
        res_V_V_din = tmp_V_54_reg_282;
    end else if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state25))) begin
        res_V_V_din = tmp_V_53_reg_277;
    end else if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
        res_V_V_din = tmp_V_52_reg_272;
    end else if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state23))) begin
        res_V_V_din = tmp_V_51_reg_267;
    end else if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        res_V_V_din = tmp_V_50_reg_262;
    end else if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
        res_V_V_din = tmp_V_49_reg_257;
    end else if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state20))) begin
        res_V_V_din = tmp_V_48_reg_252;
    end else if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state19))) begin
        res_V_V_din = tmp_V_47_reg_247;
    end else if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state18))) begin
        res_V_V_din = tmp_V_46_reg_242;
    end else if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
        res_V_V_din = tmp_V_45_reg_237;
    end else if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
        res_V_V_din = tmp_V_44_reg_232;
    end else if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
        res_V_V_din = tmp_V_43_reg_227;
    end else if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
        res_V_V_din = tmp_V_42_reg_222;
    end else if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
        res_V_V_din = tmp_V_41_reg_217;
    end else if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
        res_V_V_din = tmp_V_40_reg_212;
    end else if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        res_V_V_din = tmp_V_39_reg_207;
    end else if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        res_V_V_din = tmp_V_38_reg_202;
    end else if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        res_V_V_din = tmp_V_37_reg_197;
    end else if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
        res_V_V_din = tmp_V_36_reg_192;
    end else if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
        res_V_V_din = tmp_V_35_reg_187;
    end else if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        res_V_V_din = tmp_V_34_reg_182;
    end else if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        res_V_V_din = tmp_V_33_reg_177;
    end else if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        res_V_V_din = tmp_V_32_reg_172;
    end else if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        res_V_V_din = tmp_V_reg_167;
    end else begin
        res_V_V_din = 'bx;
    end
end

always @ (*) begin
    if (((~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state29)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state28)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state27)) | ((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state26)) | ((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state25)) | ((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state24)) | ((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state23)) | ((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state22)) | ((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state21)) | ((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state20)) | ((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state19)) | ((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state18)) | ((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state17)) | ((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state16)) | ((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state15)) | ((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state14)) | ((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state13)) | ((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state12)) | ((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state11)) | ((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state10)) | ((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state9)) | ((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state8)) | ((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state7)) | ((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state6)) | ((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state5)) | ((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | ((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state3)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state34)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state33)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state32)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state31)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state30)))) begin
        res_V_V_write = 1'b1;
    end else begin
        res_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state20 : begin
            if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state27 : begin
            if ((~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state27))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state28 : begin
            if ((~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state28))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state29 : begin
            if ((~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state29))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state30 : begin
            if ((~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state30))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state31 : begin
            if ((~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state31))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state32 : begin
            if ((~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state32))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_state33 : begin
            if ((~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state33))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_state34 : begin
            if ((~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state34))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (real_start == 1'b0));
end

always @ (*) begin
    ap_block_state1_ignore_call10 = ((ap_done_reg == 1'b1) | (real_start == 1'b0));
end

always @ (*) begin
    ap_block_state27 = ((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state28 = ((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state29 = ((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state30 = ((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state31 = ((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state32 = ((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state33 = ((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state34 = ((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0));
end

assign ap_ready = internal_ap_ready;

assign grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_start = grp_dense_large_ap_fixed_ap_fixed_32_16_5_3_0_config46_s_fu_35_ap_start_reg;

assign start_out = real_start;

endmodule //dense_large_stream_me_ap_fixed_ap_fixed_config46_s
