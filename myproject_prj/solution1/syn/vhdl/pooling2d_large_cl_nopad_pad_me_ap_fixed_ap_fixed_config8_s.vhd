-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pooling2d_large_cl_nopad_pad_me_ap_fixed_ap_fixed_config8_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    data_V_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    data_V_V_empty_n : IN STD_LOGIC;
    data_V_V_read : OUT STD_LOGIC;
    res_V_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    res_V_V_full_n : IN STD_LOGIC;
    res_V_V_write : OUT STD_LOGIC );
end;


architecture behav of pooling2d_large_cl_nopad_pad_me_ap_fixed_ap_fixed_config8_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (29 downto 0) := "000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (29 downto 0) := "000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (29 downto 0) := "000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (29 downto 0) := "000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (29 downto 0) := "000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (29 downto 0) := "000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (29 downto 0) := "000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (29 downto 0) := "000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (29 downto 0) := "000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (29 downto 0) := "001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (29 downto 0) := "010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (29 downto 0) := "100000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv12_C08 : STD_LOGIC_VECTOR (11 downto 0) := "110000001000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv8_1F : STD_LOGIC_VECTOR (7 downto 0) := "00011111";
    constant ap_const_lv32_3FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111111111";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv10_1F : STD_LOGIC_VECTOR (9 downto 0) := "0000011111";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv9_1F : STD_LOGIC_VECTOR (8 downto 0) := "000011111";
    constant ap_const_lv1024_lc_2 : STD_LOGIC_VECTOR (1023 downto
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv7_1F : STD_LOGIC_VECTOR (6 downto 0) := "0011111";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv128_lc_3 : STD_LOGIC_VECTOR (127 downto 0) := "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal layer_in_V_23 : STD_LOGIC_VECTOR (1023 downto
    signal sX : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal sY : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal pY : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal pX : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal data_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln484_fu_225_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal res_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal icmp_ln512_fu_846_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_ih_fu_231_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_ih_reg_998 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal tmp_V_65_reg_1003 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_66_reg_1008 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_67_reg_1013 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_68_reg_1018 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_69_reg_1023 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_70_reg_1028 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_71_reg_1033 : STD_LOGIC_VECTOR (31 downto 0);
    signal sX_load_reg_1038 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln498_fu_247_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln498_reg_1043 : STD_LOGIC_VECTOR (0 downto 0);
    signal sY_load_reg_1048 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln498_1_fu_257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln498_1_reg_1053 : STD_LOGIC_VECTOR (0 downto 0);
    signal pY_load_reg_1058 : STD_LOGIC_VECTOR (31 downto 0);
    signal pX_load_reg_1064 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln498_2_fu_295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln498_2_reg_1070 : STD_LOGIC_VECTOR (0 downto 0);
    signal i1_fu_307_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i1_reg_1077 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal layer_in_V_23_load_1_reg_1082 : STD_LOGIC_VECTOR (1023 downto 0);
    signal icmp_ln500_fu_301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln203_1_fu_381_p3 : STD_LOGIC_VECTOR (1023 downto 0);
    signal select_ln203_1_reg_1088 : STD_LOGIC_VECTOR (1023 downto 0);
    signal select_ln203_2_fu_389_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln203_2_reg_1093 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln203_2_fu_397_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln203_2_reg_1098 : STD_LOGIC_VECTOR (10 downto 0);
    signal xor_ln203_fu_403_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal xor_ln203_reg_1103 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_5_fu_409_p4 : STD_LOGIC_VECTOR (1023 downto 0);
    signal tmp_5_reg_1108 : STD_LOGIC_VECTOR (1023 downto 0);
    signal select_ln203_7_fu_485_p3 : STD_LOGIC_VECTOR (1023 downto 0);
    signal select_ln203_7_reg_1113 : STD_LOGIC_VECTOR (1023 downto 0);
    signal select_ln203_8_fu_493_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln203_8_reg_1118 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln203_8_fu_501_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln203_8_reg_1123 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_7_fu_507_p4 : STD_LOGIC_VECTOR (1023 downto 0);
    signal tmp_7_reg_1128 : STD_LOGIC_VECTOR (1023 downto 0);
    signal icmp_ln522_fu_517_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln522_reg_1133 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln537_fu_538_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln537_reg_1137 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln532_fu_578_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln532_reg_1145 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln526_fu_557_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal select_ln203_4_fu_652_p3 : STD_LOGIC_VECTOR (1023 downto 0);
    signal select_ln203_4_reg_1155 : STD_LOGIC_VECTOR (1023 downto 0);
    signal select_ln203_5_fu_658_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln203_5_reg_1160 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln203_5_fu_666_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln203_5_reg_1165 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln203_10_fu_728_p3 : STD_LOGIC_VECTOR (1023 downto 0);
    signal select_ln203_10_reg_1175 : STD_LOGIC_VECTOR (1023 downto 0);
    signal select_ln203_11_fu_734_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln203_11_reg_1180 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln203_11_fu_742_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln203_11_reg_1185 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_fu_594_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal lshr_ln203_reg_1200 : STD_LOGIC_VECTOR (1023 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal grp_fu_675_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal lshr_ln203_4_reg_1205 : STD_LOGIC_VECTOR (1023 downto 0);
    signal pool_res_V_fu_778_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal pool_res_V_reg_1210 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal grp_fu_751_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal lshr_ln203_2_reg_1216 : STD_LOGIC_VECTOR (1023 downto 0);
    signal trunc_ln203_2_fu_796_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln203_2_reg_1221 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_759_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal lshr_ln203_6_reg_1226 : STD_LOGIC_VECTOR (1023 downto 0);
    signal pool_V_fu_836_p5 : STD_LOGIC_VECTOR (127 downto 0);
    signal pool_V_reg_1231 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal select_ln1494_1_fu_919_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal select_ln1494_1_reg_1240 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_block_state19 : BOOLEAN;
    signal select_ln1494_2_fu_926_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln1494_2_reg_1245 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln1494_2_fu_934_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln1494_2_reg_1250 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_fu_940_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_1255 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal grp_fu_949_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln1494_reg_1265 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal trunc_ln1494_fu_968_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln1494_reg_1270 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal pool_res_V_1_fu_977_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal call_ret_cnnshift_arr_ap_fixed_ap_fixed_32_16_5_3_0_config8_s_fu_190_ap_start : STD_LOGIC;
    signal call_ret_cnnshift_arr_ap_fixed_ap_fixed_32_16_5_3_0_config8_s_fu_190_ap_done : STD_LOGIC;
    signal call_ret_cnnshift_arr_ap_fixed_ap_fixed_32_16_5_3_0_config8_s_fu_190_ap_idle : STD_LOGIC;
    signal call_ret_cnnshift_arr_ap_fixed_ap_fixed_32_16_5_3_0_config8_s_fu_190_ap_ready : STD_LOGIC;
    signal call_ret_cnnshift_arr_ap_fixed_ap_fixed_32_16_5_3_0_config8_s_fu_190_ap_return : STD_LOGIC_VECTOR (1023 downto 0);
    signal i_ih_0_reg_135 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal i1_0_reg_146 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_V_reg_157 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_reg_168 : STD_LOGIC_VECTOR (2 downto 0);
    signal storemerge_reg_179 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal add_ln530_fu_562_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln535_fu_522_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln498_2_fu_267_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln498_3_fu_277_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln498_1_fu_289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln498_fu_283_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_93_fu_313_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_2_fu_317_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_94_fu_325_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln203_fu_337_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln203_1_fu_341_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln203_fu_331_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln203_fu_355_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln203_1_fu_367_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_1_fu_345_p4 : STD_LOGIC_VECTOR (1023 downto 0);
    signal xor_ln203_1_fu_361_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln203_fu_373_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_4_fu_419_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_96_fu_429_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln203_8_fu_441_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln203_9_fu_445_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln203_2_fu_435_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln203_6_fu_459_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln203_7_fu_471_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_6_fu_449_p4 : STD_LOGIC_VECTOR (1023 downto 0);
    signal xor_ln203_3_fu_465_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln203_6_fu_477_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln537_fu_533_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln532_fu_573_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_594_p1 : STD_LOGIC_VECTOR (1023 downto 0);
    signal tmp_3_fu_599_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_95_fu_606_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln203_4_fu_618_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln203_5_fu_622_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln203_1_fu_612_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln203_3_fu_626_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln203_4_fu_638_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal xor_ln203_2_fu_632_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln203_3_fu_644_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_675_p1 : STD_LOGIC_VECTOR (1023 downto 0);
    signal empty_97_fu_680_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_cast1_fu_684_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln203_12_fu_694_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln203_13_fu_698_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln203_3_fu_688_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln203_9_fu_702_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln203_10_fu_714_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal xor_ln203_4_fu_708_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln203_9_fu_720_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_751_p1 : STD_LOGIC_VECTOR (1023 downto 0);
    signal grp_fu_759_p1 : STD_LOGIC_VECTOR (1023 downto 0);
    signal zext_ln203_3_fu_764_p1 : STD_LOGIC_VECTOR (1023 downto 0);
    signal lshr_ln203_1_fu_767_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal and_ln203_fu_773_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal zext_ln203_11_fu_782_p1 : STD_LOGIC_VECTOR (1023 downto 0);
    signal lshr_ln203_5_fu_785_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal and_ln203_2_fu_791_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal zext_ln203_7_fu_800_p1 : STD_LOGIC_VECTOR (1023 downto 0);
    signal lshr_ln203_3_fu_803_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal and_ln203_1_fu_809_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal zext_ln203_15_fu_818_p1 : STD_LOGIC_VECTOR (1023 downto 0);
    signal lshr_ln203_7_fu_821_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal and_ln203_3_fu_827_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal trunc_ln203_3_fu_832_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln203_1_fu_814_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_99_fu_852_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_s_fu_856_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_100_fu_864_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln1494_fu_876_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1494_1_fu_880_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1494_1_fu_870_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln1494_fu_893_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln1494_1_fu_905_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_fu_884_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal xor_ln1494_fu_899_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln1494_fu_911_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_949_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln1494_3_fu_954_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln1494_1_fu_957_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal and_ln1494_fu_963_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal icmp_ln1494_fu_972_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_condition_224 : BOOLEAN;
    signal ap_condition_396 : BOOLEAN;
    signal ap_condition_235 : BOOLEAN;
    signal ap_condition_389 : BOOLEAN;

    component cnnshift_arr_ap_fixed_ap_fixed_32_16_5_3_0_config8_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        data_0_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_1_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_2_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_3_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_4_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_5_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_6_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_7_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        output_V_read : IN STD_LOGIC_VECTOR (1023 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (1023 downto 0) );
    end component;


    component myproject_axi_lshr_1024ns_11ns_1024_6_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        OP : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (1023 downto 0);
        din1 : IN STD_LOGIC_VECTOR (1023 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (1023 downto 0) );
    end component;


    component myproject_axi_lshr_128ns_8ns_128_6_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        OP : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (127 downto 0);
        din1 : IN STD_LOGIC_VECTOR (127 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (127 downto 0) );
    end component;



begin
    call_ret_cnnshift_arr_ap_fixed_ap_fixed_32_16_5_3_0_config8_s_fu_190 : component cnnshift_arr_ap_fixed_ap_fixed_32_16_5_3_0_config8_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => call_ret_cnnshift_arr_ap_fixed_ap_fixed_32_16_5_3_0_config8_s_fu_190_ap_start,
        ap_done => call_ret_cnnshift_arr_ap_fixed_ap_fixed_32_16_5_3_0_config8_s_fu_190_ap_done,
        ap_idle => call_ret_cnnshift_arr_ap_fixed_ap_fixed_32_16_5_3_0_config8_s_fu_190_ap_idle,
        ap_ready => call_ret_cnnshift_arr_ap_fixed_ap_fixed_32_16_5_3_0_config8_s_fu_190_ap_ready,
        data_0_V_read => tmp_V_65_reg_1003,
        data_1_V_read => tmp_V_66_reg_1008,
        data_2_V_read => tmp_V_67_reg_1013,
        data_3_V_read => tmp_V_68_reg_1018,
        data_4_V_read => tmp_V_69_reg_1023,
        data_5_V_read => tmp_V_70_reg_1028,
        data_6_V_read => tmp_V_71_reg_1033,
        data_7_V_read => data_V_V_dout,
        output_V_read => layer_in_V_23,
        ap_return => call_ret_cnnshift_arr_ap_fixed_ap_fixed_32_16_5_3_0_config8_s_fu_190_ap_return);

    myproject_axi_lshr_1024ns_11ns_1024_6_1_U39 : component myproject_axi_lshr_1024ns_11ns_1024_6_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        OP => 1,
        din0_WIDTH => 1024,
        din1_WIDTH => 11,
        dout_WIDTH => 1024)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => select_ln203_1_reg_1088,
        din1 => grp_fu_594_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_594_p2);

    myproject_axi_lshr_1024ns_11ns_1024_6_1_U40 : component myproject_axi_lshr_1024ns_11ns_1024_6_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        OP => 1,
        din0_WIDTH => 1024,
        din1_WIDTH => 11,
        dout_WIDTH => 1024)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => select_ln203_7_reg_1113,
        din1 => grp_fu_675_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_675_p2);

    myproject_axi_lshr_1024ns_11ns_1024_6_1_U41 : component myproject_axi_lshr_1024ns_11ns_1024_6_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        OP => 1,
        din0_WIDTH => 1024,
        din1_WIDTH => 11,
        dout_WIDTH => 1024)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => select_ln203_4_reg_1155,
        din1 => grp_fu_751_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_751_p2);

    myproject_axi_lshr_1024ns_11ns_1024_6_1_U42 : component myproject_axi_lshr_1024ns_11ns_1024_6_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        OP => 1,
        din0_WIDTH => 1024,
        din1_WIDTH => 11,
        dout_WIDTH => 1024)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => select_ln203_10_reg_1175,
        din1 => grp_fu_759_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_759_p2);

    myproject_axi_lshr_128ns_8ns_128_6_1_U43 : component myproject_axi_lshr_128ns_8ns_128_6_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        OP => 1,
        din0_WIDTH => 128,
        din1_WIDTH => 8,
        dout_WIDTH => 128)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => select_ln1494_1_reg_1240,
        din1 => grp_fu_949_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_949_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((icmp_ln484_fu_225_p2 = ap_const_lv1_0) and (data_V_V_empty_n = ap_const_logic_0))) and (icmp_ln484_fu_225_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i1_0_reg_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((data_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = and_ln498_2_fu_295_p2))) then 
                i1_0_reg_146 <= ap_const_lv4_0;
            elsif ((not(((res_V_V_full_n = ap_const_logic_0) and (icmp_ln512_fu_846_p2 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln512_fu_846_p2 = ap_const_lv1_1))) then 
                i1_0_reg_146 <= i1_reg_1077;
            end if; 
        end if;
    end process;

    i_0_reg_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                i_0_reg_168 <= i_reg_1255;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                i_0_reg_168 <= ap_const_lv3_1;
            end if; 
        end if;
    end process;

    i_ih_0_reg_135_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                i_ih_0_reg_135 <= i_ih_reg_998;
            elsif ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_ih_0_reg_135 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    pX_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                if ((ap_const_boolean_1 = ap_condition_396)) then 
                    pX <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_condition_224)) then 
                    pX <= add_ln535_fu_522_p2;
                end if;
            end if; 
        end if;
    end process;

    pY_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                if ((ap_const_boolean_1 = ap_condition_389)) then 
                    pY <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_condition_235)) then 
                    pY <= add_ln530_fu_562_p2;
                end if;
            end if; 
        end if;
    end process;

    sX_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                sX <= select_ln537_reg_1137;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (((ap_const_lv1_0 = and_ln498_2_reg_1070) and (icmp_ln522_fu_517_p2 = ap_const_lv1_1)) or ((icmp_ln522_fu_517_p2 = ap_const_lv1_1) and (icmp_ln500_fu_301_p2 = ap_const_lv1_1))))) then 
                sX <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    storemerge_reg_179_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (((ap_const_lv1_0 = and_ln498_2_reg_1070) and (icmp_ln526_fu_557_p2 = ap_const_lv1_1) and (icmp_ln522_fu_517_p2 = ap_const_lv1_1)) or ((icmp_ln526_fu_557_p2 = ap_const_lv1_1) and (icmp_ln522_fu_517_p2 = ap_const_lv1_1) and (icmp_ln500_fu_301_p2 = ap_const_lv1_1))))) then 
                storemerge_reg_179 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                storemerge_reg_179 <= select_ln532_reg_1145;
            end if; 
        end if;
    end process;

    tmp_V_reg_157_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                tmp_V_reg_157 <= pool_res_V_1_fu_977_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                tmp_V_reg_157 <= pool_res_V_reg_1210;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((data_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                and_ln498_2_reg_1070 <= and_ln498_2_fu_295_p2;
                icmp_ln498_1_reg_1053 <= icmp_ln498_1_fu_257_p2;
                icmp_ln498_reg_1043 <= icmp_ln498_fu_247_p2;
                layer_in_V_23 <= call_ret_cnnshift_arr_ap_fixed_ap_fixed_32_16_5_3_0_config8_s_fu_190_ap_return;
                pX_load_reg_1064 <= pX;
                pY_load_reg_1058 <= pY;
                sX_load_reg_1038 <= sX;
                sY_load_reg_1048 <= sY;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_1 = and_ln498_2_reg_1070))) then
                i1_reg_1077 <= i1_fu_307_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln484_fu_225_p2 = ap_const_lv1_0) and (data_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                i_ih_reg_998 <= i_ih_fu_231_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((res_V_V_full_n = ap_const_logic_0) and (icmp_ln512_fu_846_p2 = ap_const_lv1_1))) and (icmp_ln512_fu_846_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                i_reg_1255 <= i_fu_940_p2;
                select_ln1494_1_reg_1240 <= select_ln1494_1_fu_919_p3;
                select_ln1494_2_reg_1245 <= select_ln1494_2_fu_926_p3;
                    sub_ln1494_2_reg_1250(7 downto 1) <= sub_ln1494_2_fu_934_p2(7 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and ((ap_const_lv1_0 = and_ln498_2_reg_1070) or (icmp_ln500_fu_301_p2 = ap_const_lv1_1)))) then
                icmp_ln522_reg_1133 <= icmp_ln522_fu_517_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln500_fu_301_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_1 = and_ln498_2_reg_1070))) then
                layer_in_V_23_load_1_reg_1082 <= layer_in_V_23;
                select_ln203_1_reg_1088 <= select_ln203_1_fu_381_p3;
                select_ln203_2_reg_1093 <= select_ln203_2_fu_389_p3;
                select_ln203_7_reg_1113 <= select_ln203_7_fu_485_p3;
                select_ln203_8_reg_1118 <= select_ln203_8_fu_493_p3;
                    sub_ln203_2_reg_1098(10 downto 1) <= sub_ln203_2_fu_397_p2(10 downto 1);
                    sub_ln203_8_reg_1123(10 downto 1) <= sub_ln203_8_fu_501_p2(10 downto 1);
                tmp_5_reg_1108 <= tmp_5_fu_409_p4;
                tmp_7_reg_1128 <= tmp_7_fu_507_p4;
                xor_ln203_reg_1103 <= xor_ln203_fu_403_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                lshr_ln1494_reg_1265 <= grp_fu_949_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                lshr_ln203_2_reg_1216 <= grp_fu_751_p2;
                lshr_ln203_6_reg_1226 <= grp_fu_759_p2;
                pool_res_V_reg_1210 <= pool_res_V_fu_778_p1;
                trunc_ln203_2_reg_1221 <= trunc_ln203_2_fu_796_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                lshr_ln203_4_reg_1205 <= grp_fu_675_p2;
                lshr_ln203_reg_1200 <= grp_fu_594_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                pool_V_reg_1231 <= pool_V_fu_836_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state30) and (icmp_ln522_reg_1133 = ap_const_lv1_1))) then
                sY <= storemerge_reg_179;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                select_ln203_10_reg_1175 <= select_ln203_10_fu_728_p3;
                select_ln203_11_reg_1180 <= select_ln203_11_fu_734_p3;
                select_ln203_4_reg_1155 <= select_ln203_4_fu_652_p3;
                select_ln203_5_reg_1160 <= select_ln203_5_fu_658_p3;
                    sub_ln203_11_reg_1185(10 downto 1) <= sub_ln203_11_fu_742_p2(10 downto 1);
                    sub_ln203_5_reg_1165(10 downto 1) <= sub_ln203_5_fu_666_p2(10 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (((icmp_ln526_fu_557_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln498_2_reg_1070) and (icmp_ln522_fu_517_p2 = ap_const_lv1_1)) or ((icmp_ln526_fu_557_p2 = ap_const_lv1_0) and (icmp_ln522_fu_517_p2 = ap_const_lv1_1) and (icmp_ln500_fu_301_p2 = ap_const_lv1_1))))) then
                select_ln532_reg_1145 <= select_ln532_fu_578_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (((icmp_ln522_fu_517_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln498_2_reg_1070)) or ((icmp_ln522_fu_517_p2 = ap_const_lv1_0) and (icmp_ln500_fu_301_p2 = ap_const_lv1_1))))) then
                select_ln537_reg_1137 <= select_ln537_fu_538_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln484_fu_225_p2 = ap_const_lv1_0) and (data_V_V_empty_n = ap_const_logic_0))) and (icmp_ln484_fu_225_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_V_65_reg_1003 <= data_V_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((data_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp_V_66_reg_1008 <= data_V_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((data_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                tmp_V_67_reg_1013 <= data_V_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((data_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                tmp_V_68_reg_1018 <= data_V_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((data_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                tmp_V_69_reg_1023 <= data_V_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((data_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                tmp_V_70_reg_1028 <= data_V_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((data_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                tmp_V_71_reg_1033 <= data_V_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                trunc_ln1494_reg_1270 <= trunc_ln1494_fu_968_p1;
            end if;
        end if;
    end process;
    sub_ln203_2_reg_1098(0) <= '0';
    sub_ln203_8_reg_1123(0) <= '0';
    sub_ln203_5_reg_1165(0) <= '0';
    sub_ln203_11_reg_1185(0) <= '0';
    sub_ln1494_2_reg_1250(0) <= '0';

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, data_V_V_empty_n, res_V_V_full_n, ap_CS_fsm_state2, icmp_ln484_fu_225_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state19, icmp_ln512_fu_846_p2, and_ln498_2_reg_1070, ap_CS_fsm_state10, icmp_ln500_fu_301_p2, icmp_ln522_fu_517_p2, icmp_ln526_fu_557_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((icmp_ln484_fu_225_p2 = ap_const_lv1_0) and (data_V_V_empty_n = ap_const_logic_0))) and (icmp_ln484_fu_225_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((icmp_ln484_fu_225_p2 = ap_const_lv1_0) and (data_V_V_empty_n = ap_const_logic_0))) and (icmp_ln484_fu_225_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((data_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((data_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((data_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((data_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((data_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (((data_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((data_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (((ap_const_lv1_0 = and_ln498_2_reg_1070) and (icmp_ln526_fu_557_p2 = ap_const_lv1_1) and (icmp_ln522_fu_517_p2 = ap_const_lv1_1)) or ((icmp_ln526_fu_557_p2 = ap_const_lv1_1) and (icmp_ln522_fu_517_p2 = ap_const_lv1_1) and (icmp_ln500_fu_301_p2 = ap_const_lv1_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (((icmp_ln526_fu_557_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln498_2_reg_1070) and (icmp_ln522_fu_517_p2 = ap_const_lv1_1)) or ((icmp_ln526_fu_557_p2 = ap_const_lv1_0) and (icmp_ln522_fu_517_p2 = ap_const_lv1_1) and (icmp_ln500_fu_301_p2 = ap_const_lv1_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (((icmp_ln522_fu_517_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln498_2_reg_1070)) or ((icmp_ln522_fu_517_p2 = ap_const_lv1_0) and (icmp_ln500_fu_301_p2 = ap_const_lv1_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                if ((not(((res_V_V_full_n = ap_const_logic_0) and (icmp_ln512_fu_846_p2 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln512_fu_846_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                elsif ((not(((res_V_V_full_n = ap_const_logic_0) and (icmp_ln512_fu_846_p2 = ap_const_lv1_1))) and (icmp_ln512_fu_846_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln530_fu_562_p2 <= std_logic_vector(unsigned(pY_load_reg_1058) + unsigned(ap_const_lv32_1));
    add_ln532_fu_573_p2 <= std_logic_vector(unsigned(sY_load_reg_1048) + unsigned(ap_const_lv32_1));
    add_ln535_fu_522_p2 <= std_logic_vector(unsigned(pX_load_reg_1064) + unsigned(ap_const_lv32_1));
    add_ln537_fu_533_p2 <= std_logic_vector(unsigned(sX_load_reg_1038) + unsigned(ap_const_lv32_1));
    and_ln1494_fu_963_p2 <= (lshr_ln1494_reg_1265 and lshr_ln1494_1_fu_957_p2);
    and_ln203_1_fu_809_p2 <= (lshr_ln203_3_fu_803_p2 and lshr_ln203_2_reg_1216);
    and_ln203_2_fu_791_p2 <= (lshr_ln203_5_fu_785_p2 and lshr_ln203_4_reg_1205);
    and_ln203_3_fu_827_p2 <= (lshr_ln203_7_fu_821_p2 and lshr_ln203_6_reg_1226);
    and_ln203_fu_773_p2 <= (lshr_ln203_reg_1200 and lshr_ln203_1_fu_767_p2);
    and_ln498_1_fu_289_p2 <= (icmp_ln498_3_fu_277_p2 and icmp_ln498_2_fu_267_p2);
    and_ln498_2_fu_295_p2 <= (and_ln498_fu_283_p2 and and_ln498_1_fu_289_p2);
    and_ln498_fu_283_p2 <= (icmp_ln498_fu_247_p2 and icmp_ln498_1_fu_257_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0));
    end process;


    ap_block_state19_assign_proc : process(res_V_V_full_n, icmp_ln512_fu_846_p2)
    begin
                ap_block_state19 <= ((res_V_V_full_n = ap_const_logic_0) and (icmp_ln512_fu_846_p2 = ap_const_lv1_1));
    end process;


    ap_block_state2_assign_proc : process(data_V_V_empty_n, icmp_ln484_fu_225_p2)
    begin
                ap_block_state2 <= ((icmp_ln484_fu_225_p2 = ap_const_lv1_0) and (data_V_V_empty_n = ap_const_logic_0));
    end process;


    ap_condition_224_assign_proc : process(and_ln498_2_reg_1070, icmp_ln500_fu_301_p2, icmp_ln522_fu_517_p2)
    begin
                ap_condition_224 <= (((icmp_ln522_fu_517_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln498_2_reg_1070)) or ((icmp_ln522_fu_517_p2 = ap_const_lv1_0) and (icmp_ln500_fu_301_p2 = ap_const_lv1_1)));
    end process;


    ap_condition_235_assign_proc : process(and_ln498_2_reg_1070, icmp_ln500_fu_301_p2, icmp_ln522_fu_517_p2, icmp_ln526_fu_557_p2)
    begin
                ap_condition_235 <= (((icmp_ln526_fu_557_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln498_2_reg_1070) and (icmp_ln522_fu_517_p2 = ap_const_lv1_1)) or ((icmp_ln526_fu_557_p2 = ap_const_lv1_0) and (icmp_ln522_fu_517_p2 = ap_const_lv1_1) and (icmp_ln500_fu_301_p2 = ap_const_lv1_1)));
    end process;


    ap_condition_389_assign_proc : process(and_ln498_2_reg_1070, icmp_ln500_fu_301_p2, icmp_ln522_fu_517_p2, icmp_ln526_fu_557_p2)
    begin
                ap_condition_389 <= (((ap_const_lv1_0 = and_ln498_2_reg_1070) and (icmp_ln526_fu_557_p2 = ap_const_lv1_1) and (icmp_ln522_fu_517_p2 = ap_const_lv1_1)) or ((icmp_ln526_fu_557_p2 = ap_const_lv1_1) and (icmp_ln522_fu_517_p2 = ap_const_lv1_1) and (icmp_ln500_fu_301_p2 = ap_const_lv1_1)));
    end process;


    ap_condition_396_assign_proc : process(and_ln498_2_reg_1070, icmp_ln500_fu_301_p2, icmp_ln522_fu_517_p2)
    begin
                ap_condition_396 <= (((ap_const_lv1_0 = and_ln498_2_reg_1070) and (icmp_ln522_fu_517_p2 = ap_const_lv1_1)) or ((icmp_ln522_fu_517_p2 = ap_const_lv1_1) and (icmp_ln500_fu_301_p2 = ap_const_lv1_1)));
    end process;


    ap_done_assign_proc : process(ap_done_reg, data_V_V_empty_n, ap_CS_fsm_state2, icmp_ln484_fu_225_p2)
    begin
        if ((not(((icmp_ln484_fu_225_p2 = ap_const_lv1_0) and (data_V_V_empty_n = ap_const_logic_0))) and (icmp_ln484_fu_225_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    call_ret_cnnshift_arr_ap_fixed_ap_fixed_32_16_5_3_0_config8_s_fu_190_ap_start_assign_proc : process(data_V_V_empty_n, ap_CS_fsm_state9)
    begin
        if (((data_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            call_ret_cnnshift_arr_ap_fixed_ap_fixed_32_16_5_3_0_config8_s_fu_190_ap_start <= ap_const_logic_1;
        else 
            call_ret_cnnshift_arr_ap_fixed_ap_fixed_32_16_5_3_0_config8_s_fu_190_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    data_V_V_blk_n_assign_proc : process(data_V_V_empty_n, ap_CS_fsm_state2, icmp_ln484_fu_225_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((icmp_ln484_fu_225_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            data_V_V_blk_n <= data_V_V_empty_n;
        else 
            data_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_V_read_assign_proc : process(data_V_V_empty_n, ap_CS_fsm_state2, icmp_ln484_fu_225_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if ((((data_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or (not(((icmp_ln484_fu_225_p2 = ap_const_lv1_0) and (data_V_V_empty_n = ap_const_logic_0))) and (icmp_ln484_fu_225_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((data_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((data_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((data_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((data_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((data_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((data_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            data_V_V_read <= ap_const_logic_1;
        else 
            data_V_V_read <= ap_const_logic_0;
        end if; 
    end process;

    empty_100_fu_864_p2 <= (tmp_s_fu_856_p3 or ap_const_lv7_1F);
    empty_93_fu_313_p1 <= i1_0_reg_146(3 - 1 downto 0);
    empty_94_fu_325_p2 <= (tmp_2_fu_317_p3 or ap_const_lv8_1F);
    empty_95_fu_606_p2 <= (tmp_3_fu_599_p3 or ap_const_lv9_1F);
    empty_96_fu_429_p2 <= (tmp_4_fu_419_p4 or ap_const_lv10_1F);
        empty_97_fu_680_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_3_fu_599_p3),10));

    empty_99_fu_852_p1 <= i_0_reg_168(2 - 1 downto 0);
    grp_fu_594_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln203_2_reg_1093),1024));
    grp_fu_675_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln203_8_reg_1118),1024));
    grp_fu_751_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln203_5_reg_1160),1024));
    grp_fu_759_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln203_11_reg_1180),1024));
    grp_fu_949_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln1494_2_reg_1245),128));
    i1_fu_307_p2 <= std_logic_vector(unsigned(i1_0_reg_146) + unsigned(ap_const_lv4_1));
    i_fu_940_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(i_0_reg_168));
    i_ih_fu_231_p2 <= std_logic_vector(unsigned(i_ih_0_reg_135) + unsigned(ap_const_lv12_1));
    icmp_ln1494_1_fu_870_p2 <= "1" when (unsigned(tmp_s_fu_856_p3) > unsigned(empty_100_fu_864_p2)) else "0";
    icmp_ln1494_fu_972_p2 <= "1" when (signed(trunc_ln1494_reg_1270) > signed(tmp_V_reg_157)) else "0";
    icmp_ln203_1_fu_612_p2 <= "1" when (unsigned(tmp_3_fu_599_p3) > unsigned(empty_95_fu_606_p2)) else "0";
    icmp_ln203_2_fu_435_p2 <= "1" when (unsigned(tmp_4_fu_419_p4) > unsigned(empty_96_fu_429_p2)) else "0";
    icmp_ln203_3_fu_688_p2 <= "1" when (unsigned(tmp_3_fu_599_p3) > unsigned(empty_95_fu_606_p2)) else "0";
    icmp_ln203_fu_331_p2 <= "1" when (unsigned(tmp_2_fu_317_p3) > unsigned(empty_94_fu_325_p2)) else "0";
    icmp_ln484_fu_225_p2 <= "1" when (i_ih_0_reg_135 = ap_const_lv12_C08) else "0";
    icmp_ln498_1_fu_257_p2 <= "1" when (sY = ap_const_lv32_1) else "0";
    icmp_ln498_2_fu_267_p2 <= "1" when (signed(pY) > signed(ap_const_lv32_0)) else "0";
    icmp_ln498_3_fu_277_p2 <= "1" when (signed(pX) > signed(ap_const_lv32_0)) else "0";
    icmp_ln498_fu_247_p2 <= "1" when (sX = ap_const_lv32_1) else "0";
    icmp_ln500_fu_301_p2 <= "1" when (i1_0_reg_146 = ap_const_lv4_8) else "0";
    icmp_ln512_fu_846_p2 <= "1" when (i_0_reg_168 = ap_const_lv3_4) else "0";
    icmp_ln522_fu_517_p2 <= "1" when (pX_load_reg_1064 = ap_const_lv32_36) else "0";
    icmp_ln526_fu_557_p2 <= "1" when (pY_load_reg_1058 = ap_const_lv32_37) else "0";

    internal_ap_ready_assign_proc : process(data_V_V_empty_n, ap_CS_fsm_state2, icmp_ln484_fu_225_p2)
    begin
        if ((not(((icmp_ln484_fu_225_p2 = ap_const_lv1_0) and (data_V_V_empty_n = ap_const_logic_0))) and (icmp_ln484_fu_225_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln1494_1_fu_957_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv128_lc_3),to_integer(unsigned('0' & zext_ln1494_3_fu_954_p1(31-1 downto 0)))));
    lshr_ln203_1_fu_767_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv1024_lc_2),to_integer(unsigned('0' & zext_ln203_3_fu_764_p1(31-1 downto 0)))));
    lshr_ln203_3_fu_803_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv1024_lc_2),to_integer(unsigned('0' & zext_ln203_7_fu_800_p1(31-1 downto 0)))));
    lshr_ln203_5_fu_785_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv1024_lc_2),to_integer(unsigned('0' & zext_ln203_11_fu_782_p1(31-1 downto 0)))));
    lshr_ln203_7_fu_821_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv1024_lc_2),to_integer(unsigned('0' & zext_ln203_15_fu_818_p1(31-1 downto 0)))));
        p_cast1_fu_684_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(empty_95_fu_606_p2),10));

    pool_V_fu_836_p5 <= (((trunc_ln203_3_fu_832_p1 & trunc_ln203_2_reg_1221) & trunc_ln203_1_fu_814_p1) & pool_res_V_reg_1210);
    pool_res_V_1_fu_977_p3 <= 
        trunc_ln1494_reg_1270 when (icmp_ln1494_fu_972_p2(0) = '1') else 
        tmp_V_reg_157;
    pool_res_V_fu_778_p1 <= and_ln203_fu_773_p2(32 - 1 downto 0);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;


    res_V_V_blk_n_assign_proc : process(res_V_V_full_n, ap_CS_fsm_state19, icmp_ln512_fu_846_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln512_fu_846_p2 = ap_const_lv1_1))) then 
            res_V_V_blk_n <= res_V_V_full_n;
        else 
            res_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_V_din <= tmp_V_reg_157;

    res_V_V_write_assign_proc : process(res_V_V_full_n, ap_CS_fsm_state19, icmp_ln512_fu_846_p2)
    begin
        if ((not(((res_V_V_full_n = ap_const_logic_0) and (icmp_ln512_fu_846_p2 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln512_fu_846_p2 = ap_const_lv1_1))) then 
            res_V_V_write <= ap_const_logic_1;
        else 
            res_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

    select_ln1494_1_fu_919_p3 <= 
        tmp_8_fu_884_p4 when (icmp_ln1494_1_fu_870_p2(0) = '1') else 
        pool_V_reg_1231;
    select_ln1494_2_fu_926_p3 <= 
        xor_ln1494_fu_899_p2 when (icmp_ln1494_1_fu_870_p2(0) = '1') else 
        zext_ln1494_fu_876_p1;
    select_ln1494_fu_911_p3 <= 
        sub_ln1494_fu_893_p2 when (icmp_ln1494_1_fu_870_p2(0) = '1') else 
        sub_ln1494_1_fu_905_p2;
    select_ln203_10_fu_728_p3 <= 
        tmp_7_reg_1128 when (icmp_ln203_3_fu_688_p2(0) = '1') else 
        layer_in_V_23_load_1_reg_1082;
    select_ln203_11_fu_734_p3 <= 
        xor_ln203_4_fu_708_p2 when (icmp_ln203_3_fu_688_p2(0) = '1') else 
        zext_ln203_12_fu_694_p1;
    select_ln203_1_fu_381_p3 <= 
        tmp_1_fu_345_p4 when (icmp_ln203_fu_331_p2(0) = '1') else 
        layer_in_V_23;
    select_ln203_2_fu_389_p3 <= 
        xor_ln203_1_fu_361_p2 when (icmp_ln203_fu_331_p2(0) = '1') else 
        zext_ln203_fu_337_p1;
    select_ln203_3_fu_644_p3 <= 
        sub_ln203_3_fu_626_p2 when (icmp_ln203_1_fu_612_p2(0) = '1') else 
        sub_ln203_4_fu_638_p2;
    select_ln203_4_fu_652_p3 <= 
        tmp_5_reg_1108 when (icmp_ln203_1_fu_612_p2(0) = '1') else 
        layer_in_V_23_load_1_reg_1082;
    select_ln203_5_fu_658_p3 <= 
        xor_ln203_2_fu_632_p2 when (icmp_ln203_1_fu_612_p2(0) = '1') else 
        zext_ln203_4_fu_618_p1;
    select_ln203_6_fu_477_p3 <= 
        sub_ln203_6_fu_459_p2 when (icmp_ln203_2_fu_435_p2(0) = '1') else 
        sub_ln203_7_fu_471_p2;
    select_ln203_7_fu_485_p3 <= 
        tmp_6_fu_449_p4 when (icmp_ln203_2_fu_435_p2(0) = '1') else 
        layer_in_V_23;
    select_ln203_8_fu_493_p3 <= 
        xor_ln203_3_fu_465_p2 when (icmp_ln203_2_fu_435_p2(0) = '1') else 
        zext_ln203_8_fu_441_p1;
    select_ln203_9_fu_720_p3 <= 
        sub_ln203_9_fu_702_p2 when (icmp_ln203_3_fu_688_p2(0) = '1') else 
        sub_ln203_10_fu_714_p2;
    select_ln203_fu_373_p3 <= 
        sub_ln203_fu_355_p2 when (icmp_ln203_fu_331_p2(0) = '1') else 
        sub_ln203_1_fu_367_p2;
    select_ln532_fu_578_p3 <= 
        ap_const_lv32_0 when (icmp_ln498_1_reg_1053(0) = '1') else 
        add_ln532_fu_573_p2;
    select_ln537_fu_538_p3 <= 
        ap_const_lv32_0 when (icmp_ln498_reg_1043(0) = '1') else 
        add_ln537_fu_533_p2;
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln1494_1_fu_905_p2 <= std_logic_vector(unsigned(zext_ln1494_1_fu_880_p1) - unsigned(zext_ln1494_fu_876_p1));
    sub_ln1494_2_fu_934_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(select_ln1494_fu_911_p3));
    sub_ln1494_fu_893_p2 <= std_logic_vector(unsigned(zext_ln1494_fu_876_p1) - unsigned(zext_ln1494_1_fu_880_p1));
    sub_ln203_10_fu_714_p2 <= std_logic_vector(unsigned(zext_ln203_13_fu_698_p1) - unsigned(zext_ln203_12_fu_694_p1));
    sub_ln203_11_fu_742_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(select_ln203_9_fu_720_p3));
    sub_ln203_1_fu_367_p2 <= std_logic_vector(unsigned(zext_ln203_1_fu_341_p1) - unsigned(zext_ln203_fu_337_p1));
    sub_ln203_2_fu_397_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(select_ln203_fu_373_p3));
    sub_ln203_3_fu_626_p2 <= std_logic_vector(unsigned(zext_ln203_4_fu_618_p1) - unsigned(zext_ln203_5_fu_622_p1));
    sub_ln203_4_fu_638_p2 <= std_logic_vector(unsigned(zext_ln203_5_fu_622_p1) - unsigned(zext_ln203_4_fu_618_p1));
    sub_ln203_5_fu_666_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(select_ln203_3_fu_644_p3));
    sub_ln203_6_fu_459_p2 <= std_logic_vector(unsigned(zext_ln203_8_fu_441_p1) - unsigned(zext_ln203_9_fu_445_p1));
    sub_ln203_7_fu_471_p2 <= std_logic_vector(unsigned(zext_ln203_9_fu_445_p1) - unsigned(zext_ln203_8_fu_441_p1));
    sub_ln203_8_fu_501_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(select_ln203_6_fu_477_p3));
    sub_ln203_9_fu_702_p2 <= std_logic_vector(unsigned(zext_ln203_12_fu_694_p1) - unsigned(zext_ln203_13_fu_698_p1));
    sub_ln203_fu_355_p2 <= std_logic_vector(unsigned(zext_ln203_fu_337_p1) - unsigned(zext_ln203_1_fu_341_p1));
    
    tmp_1_fu_345_p4_proc : process(layer_in_V_23)
    variable vlo_cpy : STD_LOGIC_VECTOR(1024+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(1024+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    variable tmp_1_fu_345_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(10 - 1 downto 0) := ap_const_lv32_3FF(10 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(10 - 1 downto 0) := ap_const_lv32_0(10 - 1 downto 0);
        v0_cpy := layer_in_V_23;
        if (vlo_cpy(10 - 1 downto 0) > vhi_cpy(10 - 1 downto 0)) then
            vhi_cpy(10-1 downto 0) := std_logic_vector(1024-1-unsigned(ap_const_lv32_0(10-1 downto 0)));
            vlo_cpy(10-1 downto 0) := std_logic_vector(1024-1-unsigned(ap_const_lv32_3FF(10-1 downto 0)));
            for tmp_1_fu_345_p4_i in 0 to 1024-1 loop
                v0_cpy(tmp_1_fu_345_p4_i) := layer_in_V_23(1024-1-tmp_1_fu_345_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(10-1 downto 0)))));

        section := (others=>'0');
        section(10-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(10-1 downto 0)) - unsigned(vlo_cpy(10-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(1024-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_1_fu_345_p4 <= resvalue(1024-1 downto 0);
    end process;

    tmp_2_fu_317_p3 <= (empty_93_fu_313_p1 & ap_const_lv5_0);
    tmp_3_fu_599_p3 <= (xor_ln203_reg_1103 & ap_const_lv5_0);
    tmp_4_fu_419_p4 <= ((ap_const_lv1_1 & i1_0_reg_146) & ap_const_lv5_0);
    
    tmp_5_fu_409_p4_proc : process(layer_in_V_23)
    variable vlo_cpy : STD_LOGIC_VECTOR(1024+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(1024+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    variable tmp_5_fu_409_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(10 - 1 downto 0) := ap_const_lv32_3FF(10 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(10 - 1 downto 0) := ap_const_lv32_0(10 - 1 downto 0);
        v0_cpy := layer_in_V_23;
        if (vlo_cpy(10 - 1 downto 0) > vhi_cpy(10 - 1 downto 0)) then
            vhi_cpy(10-1 downto 0) := std_logic_vector(1024-1-unsigned(ap_const_lv32_0(10-1 downto 0)));
            vlo_cpy(10-1 downto 0) := std_logic_vector(1024-1-unsigned(ap_const_lv32_3FF(10-1 downto 0)));
            for tmp_5_fu_409_p4_i in 0 to 1024-1 loop
                v0_cpy(tmp_5_fu_409_p4_i) := layer_in_V_23(1024-1-tmp_5_fu_409_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(10-1 downto 0)))));

        section := (others=>'0');
        section(10-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(10-1 downto 0)) - unsigned(vlo_cpy(10-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(1024-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_5_fu_409_p4 <= resvalue(1024-1 downto 0);
    end process;

    
    tmp_6_fu_449_p4_proc : process(layer_in_V_23)
    variable vlo_cpy : STD_LOGIC_VECTOR(1024+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(1024+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    variable tmp_6_fu_449_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(10 - 1 downto 0) := ap_const_lv32_3FF(10 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(10 - 1 downto 0) := ap_const_lv32_0(10 - 1 downto 0);
        v0_cpy := layer_in_V_23;
        if (vlo_cpy(10 - 1 downto 0) > vhi_cpy(10 - 1 downto 0)) then
            vhi_cpy(10-1 downto 0) := std_logic_vector(1024-1-unsigned(ap_const_lv32_0(10-1 downto 0)));
            vlo_cpy(10-1 downto 0) := std_logic_vector(1024-1-unsigned(ap_const_lv32_3FF(10-1 downto 0)));
            for tmp_6_fu_449_p4_i in 0 to 1024-1 loop
                v0_cpy(tmp_6_fu_449_p4_i) := layer_in_V_23(1024-1-tmp_6_fu_449_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(10-1 downto 0)))));

        section := (others=>'0');
        section(10-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(10-1 downto 0)) - unsigned(vlo_cpy(10-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(1024-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_6_fu_449_p4 <= resvalue(1024-1 downto 0);
    end process;

    
    tmp_7_fu_507_p4_proc : process(layer_in_V_23)
    variable vlo_cpy : STD_LOGIC_VECTOR(1024+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(1024+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    variable tmp_7_fu_507_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(10 - 1 downto 0) := ap_const_lv32_3FF(10 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(10 - 1 downto 0) := ap_const_lv32_0(10 - 1 downto 0);
        v0_cpy := layer_in_V_23;
        if (vlo_cpy(10 - 1 downto 0) > vhi_cpy(10 - 1 downto 0)) then
            vhi_cpy(10-1 downto 0) := std_logic_vector(1024-1-unsigned(ap_const_lv32_0(10-1 downto 0)));
            vlo_cpy(10-1 downto 0) := std_logic_vector(1024-1-unsigned(ap_const_lv32_3FF(10-1 downto 0)));
            for tmp_7_fu_507_p4_i in 0 to 1024-1 loop
                v0_cpy(tmp_7_fu_507_p4_i) := layer_in_V_23(1024-1-tmp_7_fu_507_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(10-1 downto 0)))));

        section := (others=>'0');
        section(10-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(10-1 downto 0)) - unsigned(vlo_cpy(10-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(1024-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_7_fu_507_p4 <= resvalue(1024-1 downto 0);
    end process;

    
    tmp_8_fu_884_p4_proc : process(pool_V_reg_1231)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_8_fu_884_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_7F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := pool_V_reg_1231;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_7F(7-1 downto 0)));
            for tmp_8_fu_884_p4_i in 0 to 128-1 loop
                v0_cpy(tmp_8_fu_884_p4_i) := pool_V_reg_1231(128-1-tmp_8_fu_884_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_8_fu_884_p4 <= resvalue(128-1 downto 0);
    end process;

    tmp_s_fu_856_p3 <= (empty_99_fu_852_p1 & ap_const_lv5_0);
    trunc_ln1494_fu_968_p1 <= and_ln1494_fu_963_p2(32 - 1 downto 0);
    trunc_ln203_1_fu_814_p1 <= and_ln203_1_fu_809_p2(32 - 1 downto 0);
    trunc_ln203_2_fu_796_p1 <= and_ln203_2_fu_791_p2(32 - 1 downto 0);
    trunc_ln203_3_fu_832_p1 <= and_ln203_3_fu_827_p2(32 - 1 downto 0);
    xor_ln1494_fu_899_p2 <= (zext_ln1494_fu_876_p1 xor ap_const_lv8_7F);
    xor_ln203_1_fu_361_p2 <= (zext_ln203_fu_337_p1 xor ap_const_lv11_3FF);
    xor_ln203_2_fu_632_p2 <= (zext_ln203_4_fu_618_p1 xor ap_const_lv11_3FF);
    xor_ln203_3_fu_465_p2 <= (zext_ln203_8_fu_441_p1 xor ap_const_lv11_3FF);
    xor_ln203_4_fu_708_p2 <= (zext_ln203_12_fu_694_p1 xor ap_const_lv11_3FF);
    xor_ln203_fu_403_p2 <= (i1_0_reg_146 xor ap_const_lv4_8);
    zext_ln1494_1_fu_880_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_100_fu_864_p2),8));
    zext_ln1494_3_fu_954_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln1494_2_reg_1250),128));
    zext_ln1494_fu_876_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_856_p3),8));
    zext_ln203_11_fu_782_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln203_8_reg_1123),1024));
    zext_ln203_12_fu_694_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_97_fu_680_p1),11));
    zext_ln203_13_fu_698_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_cast1_fu_684_p1),11));
    zext_ln203_15_fu_818_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln203_11_reg_1185),1024));
    zext_ln203_1_fu_341_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_94_fu_325_p2),11));
    zext_ln203_3_fu_764_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln203_2_reg_1098),1024));
    zext_ln203_4_fu_618_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_599_p3),11));
    zext_ln203_5_fu_622_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_95_fu_606_p2),11));
    zext_ln203_7_fu_800_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln203_5_reg_1165),1024));
    zext_ln203_8_fu_441_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_419_p4),11));
    zext_ln203_9_fu_445_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_96_fu_429_p2),11));
    zext_ln203_fu_337_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_317_p3),11));
end behav;
