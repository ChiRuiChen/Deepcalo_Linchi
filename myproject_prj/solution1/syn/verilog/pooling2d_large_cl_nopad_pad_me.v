// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pooling2d_large_cl_nopad_pad_me (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        data_V_V_dout,
        data_V_V_empty_n,
        data_V_V_read,
        res_V_V_din,
        res_V_V_full_n,
        res_V_V_write
);

parameter    ap_ST_fsm_state1 = 30'd1;
parameter    ap_ST_fsm_state2 = 30'd2;
parameter    ap_ST_fsm_state3 = 30'd4;
parameter    ap_ST_fsm_state4 = 30'd8;
parameter    ap_ST_fsm_state5 = 30'd16;
parameter    ap_ST_fsm_state6 = 30'd32;
parameter    ap_ST_fsm_state7 = 30'd64;
parameter    ap_ST_fsm_state8 = 30'd128;
parameter    ap_ST_fsm_state9 = 30'd256;
parameter    ap_ST_fsm_state10 = 30'd512;
parameter    ap_ST_fsm_state11 = 30'd1024;
parameter    ap_ST_fsm_state12 = 30'd2048;
parameter    ap_ST_fsm_state13 = 30'd4096;
parameter    ap_ST_fsm_state14 = 30'd8192;
parameter    ap_ST_fsm_state15 = 30'd16384;
parameter    ap_ST_fsm_state16 = 30'd32768;
parameter    ap_ST_fsm_state17 = 30'd65536;
parameter    ap_ST_fsm_state18 = 30'd131072;
parameter    ap_ST_fsm_state19 = 30'd262144;
parameter    ap_ST_fsm_state20 = 30'd524288;
parameter    ap_ST_fsm_state21 = 30'd1048576;
parameter    ap_ST_fsm_state22 = 30'd2097152;
parameter    ap_ST_fsm_state23 = 30'd4194304;
parameter    ap_ST_fsm_state24 = 30'd8388608;
parameter    ap_ST_fsm_state25 = 30'd16777216;
parameter    ap_ST_fsm_state26 = 30'd33554432;
parameter    ap_ST_fsm_state27 = 30'd67108864;
parameter    ap_ST_fsm_state28 = 30'd134217728;
parameter    ap_ST_fsm_state29 = 30'd268435456;
parameter    ap_ST_fsm_state30 = 30'd536870912;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] data_V_V_dout;
input   data_V_V_empty_n;
output   data_V_V_read;
output  [31:0] res_V_V_din;
input   res_V_V_full_n;
output   res_V_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg data_V_V_read;
reg res_V_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [29:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg   [1023:0] layer_in_V_24;
reg   [31:0] sX_12;
reg   [31:0] sY_12;
reg   [31:0] pY_12;
reg   [31:0] pX_12;
reg    data_V_V_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln484_fu_217_p2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
reg    res_V_V_blk_n;
wire    ap_CS_fsm_state19;
wire   [0:0] icmp_ln512_fu_838_p2;
wire   [3:0] i_ih_fu_223_p2;
reg   [3:0] i_ih_reg_990;
reg    ap_block_state2;
reg   [31:0] tmp_V_reg_995;
reg   [31:0] tmp_V_97_reg_1000;
reg   [31:0] tmp_V_98_reg_1005;
reg   [31:0] tmp_V_99_reg_1010;
reg   [31:0] tmp_V_100_reg_1015;
reg   [31:0] tmp_V_101_reg_1020;
reg   [31:0] tmp_V_102_reg_1025;
reg   [31:0] sX_12_load_reg_1030;
wire   [0:0] icmp_ln498_fu_239_p2;
reg   [0:0] icmp_ln498_reg_1035;
reg   [31:0] sY_12_load_reg_1040;
wire   [0:0] icmp_ln498_4_fu_249_p2;
reg   [0:0] icmp_ln498_4_reg_1045;
reg   [31:0] pY_12_load_reg_1050;
reg   [31:0] pX_12_load_reg_1056;
wire   [0:0] and_ln498_4_fu_287_p2;
reg   [0:0] and_ln498_4_reg_1062;
wire   [3:0] i1_fu_299_p2;
reg   [3:0] i1_reg_1069;
wire    ap_CS_fsm_state10;
reg   [1023:0] layer_in_V_24_load_1_reg_1074;
wire   [0:0] icmp_ln500_fu_293_p2;
wire   [1023:0] select_ln203_45_fu_373_p3;
reg   [1023:0] select_ln203_45_reg_1080;
wire   [10:0] select_ln203_46_fu_381_p3;
reg   [10:0] select_ln203_46_reg_1085;
wire   [10:0] sub_ln203_46_fu_389_p2;
reg   [10:0] sub_ln203_46_reg_1090;
wire   [3:0] xor_ln203_fu_395_p2;
reg   [3:0] xor_ln203_reg_1095;
reg   [1023:0] tmp_25_fu_401_p4;
reg   [1023:0] tmp_25_reg_1100;
wire   [1023:0] select_ln203_51_fu_477_p3;
reg   [1023:0] select_ln203_51_reg_1105;
wire   [10:0] select_ln203_52_fu_485_p3;
reg   [10:0] select_ln203_52_reg_1110;
wire   [10:0] sub_ln203_52_fu_493_p2;
reg   [10:0] sub_ln203_52_reg_1115;
reg   [1023:0] tmp_27_fu_499_p4;
reg   [1023:0] tmp_27_reg_1120;
wire   [0:0] icmp_ln522_fu_509_p2;
reg   [0:0] icmp_ln522_reg_1125;
wire   [31:0] select_ln537_fu_530_p3;
reg   [31:0] select_ln537_reg_1129;
wire   [31:0] select_ln532_fu_570_p3;
reg   [31:0] select_ln532_reg_1137;
wire   [0:0] icmp_ln526_fu_549_p2;
wire    ap_CS_fsm_state11;
wire   [1023:0] select_ln203_48_fu_644_p3;
reg   [1023:0] select_ln203_48_reg_1147;
wire   [10:0] select_ln203_49_fu_650_p3;
reg   [10:0] select_ln203_49_reg_1152;
wire   [10:0] sub_ln203_49_fu_658_p2;
reg   [10:0] sub_ln203_49_reg_1157;
wire   [1023:0] select_ln203_54_fu_720_p3;
reg   [1023:0] select_ln203_54_reg_1167;
wire   [10:0] select_ln203_55_fu_726_p3;
reg   [10:0] select_ln203_55_reg_1172;
wire   [10:0] sub_ln203_55_fu_734_p2;
reg   [10:0] sub_ln203_55_reg_1177;
wire    ap_CS_fsm_state12;
wire   [1023:0] grp_fu_586_p2;
reg   [1023:0] lshr_ln203_reg_1192;
wire    ap_CS_fsm_state16;
wire   [1023:0] grp_fu_667_p2;
reg   [1023:0] lshr_ln203_32_reg_1197;
wire   [31:0] pool_res_V_fu_770_p1;
reg   [31:0] pool_res_V_reg_1202;
wire    ap_CS_fsm_state17;
wire   [1023:0] grp_fu_743_p2;
reg   [1023:0] lshr_ln203_30_reg_1208;
wire   [31:0] trunc_ln203_14_fu_788_p1;
reg   [31:0] trunc_ln203_14_reg_1213;
wire   [1023:0] grp_fu_751_p2;
reg   [1023:0] lshr_ln203_34_reg_1218;
wire   [127:0] pool_V_fu_828_p5;
reg   [127:0] pool_V_reg_1223;
wire    ap_CS_fsm_state18;
wire   [127:0] select_ln1494_9_fu_911_p3;
reg   [127:0] select_ln1494_9_reg_1232;
reg    ap_block_state19;
wire   [7:0] select_ln1494_10_fu_918_p3;
reg   [7:0] select_ln1494_10_reg_1237;
wire   [7:0] sub_ln1494_10_fu_926_p2;
reg   [7:0] sub_ln1494_10_reg_1242;
wire   [2:0] i_fu_932_p2;
reg   [2:0] i_reg_1247;
wire    ap_CS_fsm_state20;
wire   [127:0] grp_fu_941_p2;
reg   [127:0] lshr_ln1494_reg_1257;
wire    ap_CS_fsm_state25;
wire   [31:0] trunc_ln1494_fu_960_p1;
reg   [31:0] trunc_ln1494_reg_1262;
wire    ap_CS_fsm_state26;
wire   [31:0] pool_res_V_5_fu_969_p3;
wire    ap_CS_fsm_state27;
reg    call_ret_cnnshift_arr_ap_fixed_ap_fixed_32_16_5_3_0_config44_s_fu_182_ap_start;
wire    call_ret_cnnshift_arr_ap_fixed_ap_fixed_32_16_5_3_0_config44_s_fu_182_ap_done;
wire    call_ret_cnnshift_arr_ap_fixed_ap_fixed_32_16_5_3_0_config44_s_fu_182_ap_idle;
wire    call_ret_cnnshift_arr_ap_fixed_ap_fixed_32_16_5_3_0_config44_s_fu_182_ap_ready;
wire   [1023:0] call_ret_cnnshift_arr_ap_fixed_ap_fixed_32_16_5_3_0_config44_s_fu_182_ap_return;
reg   [3:0] i_ih_0_reg_127;
reg    ap_block_state1;
wire    ap_CS_fsm_state30;
reg   [3:0] i1_0_reg_138;
reg   [31:0] tmp_V_93_reg_149;
reg   [2:0] i_0_reg_160;
reg   [31:0] storemerge_reg_171;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state28;
wire   [31:0] add_ln530_fu_554_p2;
wire   [31:0] add_ln535_fu_514_p2;
wire   [0:0] icmp_ln498_5_fu_259_p2;
wire   [0:0] icmp_ln498_6_fu_269_p2;
wire   [0:0] and_ln498_3_fu_281_p2;
wire   [0:0] and_ln498_fu_275_p2;
wire   [2:0] empty_133_fu_305_p1;
wire   [7:0] tmp_s_fu_309_p3;
wire   [7:0] empty_134_fu_317_p2;
wire   [10:0] zext_ln203_fu_329_p1;
wire   [10:0] zext_ln203_61_fu_333_p1;
wire   [0:0] icmp_ln203_fu_323_p2;
wire   [10:0] sub_ln203_fu_347_p2;
wire   [10:0] sub_ln203_45_fu_359_p2;
reg   [1023:0] tmp_24_fu_337_p4;
wire   [10:0] xor_ln203_17_fu_353_p2;
wire   [10:0] select_ln203_fu_365_p3;
wire   [9:0] tmp_11_fu_411_p4;
wire   [9:0] empty_136_fu_421_p2;
wire   [10:0] zext_ln203_68_fu_433_p1;
wire   [10:0] zext_ln203_69_fu_437_p1;
wire   [0:0] icmp_ln203_14_fu_427_p2;
wire   [10:0] sub_ln203_50_fu_451_p2;
wire   [10:0] sub_ln203_51_fu_463_p2;
reg   [1023:0] tmp_26_fu_441_p4;
wire   [10:0] xor_ln203_19_fu_457_p2;
wire   [10:0] select_ln203_50_fu_469_p3;
wire   [31:0] add_ln537_fu_525_p2;
wire   [31:0] add_ln532_fu_565_p2;
wire   [1023:0] grp_fu_586_p1;
wire  signed [8:0] tmp_10_fu_591_p3;
wire  signed [8:0] empty_135_fu_598_p2;
wire   [10:0] zext_ln203_64_fu_610_p1;
wire   [10:0] zext_ln203_65_fu_614_p1;
wire   [0:0] icmp_ln203_13_fu_604_p2;
wire   [10:0] sub_ln203_47_fu_618_p2;
wire   [10:0] sub_ln203_48_fu_630_p2;
wire   [10:0] xor_ln203_18_fu_624_p2;
wire   [10:0] select_ln203_47_fu_636_p3;
wire   [1023:0] grp_fu_667_p1;
wire  signed [9:0] empty_137_fu_672_p1;
wire  signed [9:0] p_cast1_fu_676_p1;
wire   [10:0] zext_ln203_72_fu_686_p1;
wire   [10:0] zext_ln203_73_fu_690_p1;
wire   [0:0] icmp_ln203_15_fu_680_p2;
wire   [10:0] sub_ln203_53_fu_694_p2;
wire   [10:0] sub_ln203_54_fu_706_p2;
wire   [10:0] xor_ln203_20_fu_700_p2;
wire   [10:0] select_ln203_53_fu_712_p3;
wire   [1023:0] grp_fu_743_p1;
wire   [1023:0] grp_fu_751_p1;
wire   [1023:0] zext_ln203_63_fu_756_p1;
wire   [1023:0] lshr_ln203_29_fu_759_p2;
wire   [1023:0] and_ln203_fu_765_p2;
wire   [1023:0] zext_ln203_71_fu_774_p1;
wire   [1023:0] lshr_ln203_33_fu_777_p2;
wire   [1023:0] and_ln203_14_fu_783_p2;
wire   [1023:0] zext_ln203_67_fu_792_p1;
wire   [1023:0] lshr_ln203_31_fu_795_p2;
wire   [1023:0] and_ln203_13_fu_801_p2;
wire   [1023:0] zext_ln203_75_fu_810_p1;
wire   [1023:0] lshr_ln203_35_fu_813_p2;
wire   [1023:0] and_ln203_15_fu_819_p2;
wire   [31:0] trunc_ln203_15_fu_824_p1;
wire   [31:0] trunc_ln203_13_fu_806_p1;
wire   [1:0] empty_139_fu_844_p1;
wire   [6:0] tmp_12_fu_848_p3;
wire   [6:0] empty_140_fu_856_p2;
wire   [7:0] zext_ln1494_fu_868_p1;
wire   [7:0] zext_ln1494_13_fu_872_p1;
wire   [0:0] icmp_ln1494_5_fu_862_p2;
wire   [7:0] sub_ln1494_fu_885_p2;
wire   [7:0] sub_ln1494_9_fu_897_p2;
reg   [127:0] tmp_28_fu_876_p4;
wire   [7:0] xor_ln1494_fu_891_p2;
wire   [7:0] select_ln1494_fu_903_p3;
wire   [127:0] grp_fu_941_p1;
wire   [127:0] zext_ln1494_15_fu_946_p1;
wire   [127:0] lshr_ln1494_5_fu_949_p2;
wire   [127:0] and_ln1494_fu_955_p2;
wire   [0:0] icmp_ln1494_fu_964_p2;
reg   [29:0] ap_NS_fsm;
reg    ap_condition_224;
reg    ap_condition_395;
reg    ap_condition_235;
reg    ap_condition_388;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 30'd1;
#0 layer_in_V_24 = 1024'd0;
#0 sX_12 = 32'd0;
#0 sY_12 = 32'd0;
#0 pY_12 = 32'd0;
#0 pX_12 = 32'd0;
end

cnnshift_arr_ap_fixed_ap_fixed_32_16_5_3_0_config44_s call_ret_cnnshift_arr_ap_fixed_ap_fixed_32_16_5_3_0_config44_s_fu_182(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(call_ret_cnnshift_arr_ap_fixed_ap_fixed_32_16_5_3_0_config44_s_fu_182_ap_start),
    .ap_done(call_ret_cnnshift_arr_ap_fixed_ap_fixed_32_16_5_3_0_config44_s_fu_182_ap_done),
    .ap_idle(call_ret_cnnshift_arr_ap_fixed_ap_fixed_32_16_5_3_0_config44_s_fu_182_ap_idle),
    .ap_ready(call_ret_cnnshift_arr_ap_fixed_ap_fixed_32_16_5_3_0_config44_s_fu_182_ap_ready),
    .data_0_V_read(tmp_V_reg_995),
    .data_1_V_read(tmp_V_97_reg_1000),
    .data_2_V_read(tmp_V_98_reg_1005),
    .data_3_V_read(tmp_V_99_reg_1010),
    .data_4_V_read(tmp_V_100_reg_1015),
    .data_5_V_read(tmp_V_101_reg_1020),
    .data_6_V_read(tmp_V_102_reg_1025),
    .data_7_V_read(data_V_V_dout),
    .output_V_read(layer_in_V_24),
    .ap_return(call_ret_cnnshift_arr_ap_fixed_ap_fixed_32_16_5_3_0_config44_s_fu_182_ap_return)
);

myproject_axi_lshr_1024ns_11ns_1024_6_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .OP( 1 ),
    .din0_WIDTH( 1024 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 1024 ))
myproject_axi_lshr_1024ns_11ns_1024_6_1_U193(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(select_ln203_45_reg_1080),
    .din1(grp_fu_586_p1),
    .ce(1'b1),
    .dout(grp_fu_586_p2)
);

myproject_axi_lshr_1024ns_11ns_1024_6_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .OP( 1 ),
    .din0_WIDTH( 1024 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 1024 ))
myproject_axi_lshr_1024ns_11ns_1024_6_1_U194(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(select_ln203_51_reg_1105),
    .din1(grp_fu_667_p1),
    .ce(1'b1),
    .dout(grp_fu_667_p2)
);

myproject_axi_lshr_1024ns_11ns_1024_6_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .OP( 1 ),
    .din0_WIDTH( 1024 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 1024 ))
myproject_axi_lshr_1024ns_11ns_1024_6_1_U195(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(select_ln203_48_reg_1147),
    .din1(grp_fu_743_p1),
    .ce(1'b1),
    .dout(grp_fu_743_p2)
);

myproject_axi_lshr_1024ns_11ns_1024_6_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .OP( 1 ),
    .din0_WIDTH( 1024 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 1024 ))
myproject_axi_lshr_1024ns_11ns_1024_6_1_U196(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(select_ln203_54_reg_1167),
    .din1(grp_fu_751_p1),
    .ce(1'b1),
    .dout(grp_fu_751_p2)
);

myproject_axi_lshr_128ns_8ns_128_6_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .OP( 1 ),
    .din0_WIDTH( 128 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 128 ))
myproject_axi_lshr_128ns_8ns_128_6_1_U197(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(select_ln1494_9_reg_1232),
    .din1(grp_fu_941_p1),
    .ce(1'b1),
    .dout(grp_fu_941_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((icmp_ln484_fu_217_p2 == 1'd0) & (data_V_V_empty_n == 1'b0)) & (icmp_ln484_fu_217_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((data_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state9) & (1'd1 == and_ln498_4_fu_287_p2))) begin
        i1_0_reg_138 <= 4'd0;
    end else if ((~((res_V_V_full_n == 1'b0) & (icmp_ln512_fu_838_p2 == 1'd1)) & (1'b1 == ap_CS_fsm_state19) & (icmp_ln512_fu_838_p2 == 1'd1))) begin
        i1_0_reg_138 <= i1_reg_1069;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        i_0_reg_160 <= i_reg_1247;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        i_0_reg_160 <= 3'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        i_ih_0_reg_127 <= i_ih_reg_990;
    end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_ih_0_reg_127 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        if ((1'b1 == ap_condition_395)) begin
            pX_12 <= 32'd0;
        end else if ((1'b1 == ap_condition_224)) begin
            pX_12 <= add_ln535_fu_514_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        if ((1'b1 == ap_condition_388)) begin
            pY_12 <= 32'd0;
        end else if ((1'b1 == ap_condition_235)) begin
            pY_12 <= add_ln530_fu_554_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        sX_12 <= select_ln537_reg_1129;
    end else if (((1'b1 == ap_CS_fsm_state10) & (((1'd0 == and_ln498_4_reg_1062) & (icmp_ln522_fu_509_p2 == 1'd1)) | ((icmp_ln522_fu_509_p2 == 1'd1) & (icmp_ln500_fu_293_p2 == 1'd1))))) begin
        sX_12 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (((1'd0 == and_ln498_4_reg_1062) & (icmp_ln526_fu_549_p2 == 1'd1) & (icmp_ln522_fu_509_p2 == 1'd1)) | ((icmp_ln526_fu_549_p2 == 1'd1) & (icmp_ln522_fu_509_p2 == 1'd1) & (icmp_ln500_fu_293_p2 == 1'd1))))) begin
        storemerge_reg_171 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        storemerge_reg_171 <= select_ln532_reg_1137;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        tmp_V_93_reg_149 <= pool_res_V_5_fu_969_p3;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        tmp_V_93_reg_149 <= pool_res_V_reg_1202;
    end
end

always @ (posedge ap_clk) begin
    if (((data_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        and_ln498_4_reg_1062 <= and_ln498_4_fu_287_p2;
        icmp_ln498_4_reg_1045 <= icmp_ln498_4_fu_249_p2;
        icmp_ln498_reg_1035 <= icmp_ln498_fu_239_p2;
        layer_in_V_24 <= call_ret_cnnshift_arr_ap_fixed_ap_fixed_32_16_5_3_0_config44_s_fu_182_ap_return;
        pX_12_load_reg_1056 <= pX_12;
        pY_12_load_reg_1050 <= pY_12;
        sX_12_load_reg_1030 <= sX_12;
        sY_12_load_reg_1040 <= sY_12;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (1'd1 == and_ln498_4_reg_1062))) begin
        i1_reg_1069 <= i1_fu_299_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln484_fu_217_p2 == 1'd0) & (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        i_ih_reg_990 <= i_ih_fu_223_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((res_V_V_full_n == 1'b0) & (icmp_ln512_fu_838_p2 == 1'd1)) & (icmp_ln512_fu_838_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state19))) begin
        i_reg_1247 <= i_fu_932_p2;
        select_ln1494_10_reg_1237 <= select_ln1494_10_fu_918_p3;
        select_ln1494_9_reg_1232 <= select_ln1494_9_fu_911_p3;
        sub_ln1494_10_reg_1242[7 : 1] <= sub_ln1494_10_fu_926_p2[7 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & ((1'd0 == and_ln498_4_reg_1062) | (icmp_ln500_fu_293_p2 == 1'd1)))) begin
        icmp_ln522_reg_1125 <= icmp_ln522_fu_509_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln500_fu_293_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10) & (1'd1 == and_ln498_4_reg_1062))) begin
        layer_in_V_24_load_1_reg_1074 <= layer_in_V_24;
        select_ln203_45_reg_1080 <= select_ln203_45_fu_373_p3;
        select_ln203_46_reg_1085 <= select_ln203_46_fu_381_p3;
        select_ln203_51_reg_1105 <= select_ln203_51_fu_477_p3;
        select_ln203_52_reg_1110 <= select_ln203_52_fu_485_p3;
        sub_ln203_46_reg_1090[10 : 1] <= sub_ln203_46_fu_389_p2[10 : 1];
        sub_ln203_52_reg_1115[10 : 1] <= sub_ln203_52_fu_493_p2[10 : 1];
        tmp_25_reg_1100 <= tmp_25_fu_401_p4;
        tmp_27_reg_1120 <= tmp_27_fu_499_p4;
        xor_ln203_reg_1095 <= xor_ln203_fu_395_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        lshr_ln1494_reg_1257 <= grp_fu_941_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        lshr_ln203_30_reg_1208 <= grp_fu_743_p2;
        lshr_ln203_34_reg_1218 <= grp_fu_751_p2;
        pool_res_V_reg_1202 <= pool_res_V_fu_770_p1;
        trunc_ln203_14_reg_1213 <= trunc_ln203_14_fu_788_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        lshr_ln203_32_reg_1197 <= grp_fu_667_p2;
        lshr_ln203_reg_1192 <= grp_fu_586_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        pool_V_reg_1223 <= pool_V_fu_828_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state30) & (icmp_ln522_reg_1125 == 1'd1))) begin
        sY_12 <= storemerge_reg_171;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        select_ln203_48_reg_1147 <= select_ln203_48_fu_644_p3;
        select_ln203_49_reg_1152 <= select_ln203_49_fu_650_p3;
        select_ln203_54_reg_1167 <= select_ln203_54_fu_720_p3;
        select_ln203_55_reg_1172 <= select_ln203_55_fu_726_p3;
        sub_ln203_49_reg_1157[10 : 1] <= sub_ln203_49_fu_658_p2[10 : 1];
        sub_ln203_55_reg_1177[10 : 1] <= sub_ln203_55_fu_734_p2[10 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (((icmp_ln526_fu_549_p2 == 1'd0) & (1'd0 == and_ln498_4_reg_1062) & (icmp_ln522_fu_509_p2 == 1'd1)) | ((icmp_ln526_fu_549_p2 == 1'd0) & (icmp_ln522_fu_509_p2 == 1'd1) & (icmp_ln500_fu_293_p2 == 1'd1))))) begin
        select_ln532_reg_1137 <= select_ln532_fu_570_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (((icmp_ln522_fu_509_p2 == 1'd0) & (1'd0 == and_ln498_4_reg_1062)) | ((icmp_ln522_fu_509_p2 == 1'd0) & (icmp_ln500_fu_293_p2 == 1'd1))))) begin
        select_ln537_reg_1129 <= select_ln537_fu_530_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((data_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        tmp_V_100_reg_1015 <= data_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((data_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
        tmp_V_101_reg_1020 <= data_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((data_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
        tmp_V_102_reg_1025 <= data_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((data_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_V_97_reg_1000 <= data_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((data_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_V_98_reg_1005 <= data_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((data_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        tmp_V_99_reg_1010 <= data_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln484_fu_217_p2 == 1'd0) & (data_V_V_empty_n == 1'b0)) & (icmp_ln484_fu_217_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_V_reg_995 <= data_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        trunc_ln1494_reg_1262 <= trunc_ln1494_fu_960_p1;
    end
end

always @ (*) begin
    if ((~((icmp_ln484_fu_217_p2 == 1'd0) & (data_V_V_empty_n == 1'b0)) & (icmp_ln484_fu_217_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((data_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        call_ret_cnnshift_arr_ap_fixed_ap_fixed_32_16_5_3_0_config44_s_fu_182_ap_start = 1'b1;
    end else begin
        call_ret_cnnshift_arr_ap_fixed_ap_fixed_32_16_5_3_0_config44_s_fu_182_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | ((icmp_ln484_fu_217_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        data_V_V_blk_n = data_V_V_empty_n;
    end else begin
        data_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((data_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state3)) | (~((icmp_ln484_fu_217_p2 == 1'd0) & (data_V_V_empty_n == 1'b0)) & (icmp_ln484_fu_217_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((data_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state9)) | ((data_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state8)) | ((data_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state7)) | ((data_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state6)) | ((data_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state5)) | ((data_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state4)))) begin
        data_V_V_read = 1'b1;
    end else begin
        data_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln484_fu_217_p2 == 1'd0) & (data_V_V_empty_n == 1'b0)) & (icmp_ln484_fu_217_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) & (icmp_ln512_fu_838_p2 == 1'd1))) begin
        res_V_V_blk_n = res_V_V_full_n;
    end else begin
        res_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((res_V_V_full_n == 1'b0) & (icmp_ln512_fu_838_p2 == 1'd1)) & (1'b1 == ap_CS_fsm_state19) & (icmp_ln512_fu_838_p2 == 1'd1))) begin
        res_V_V_write = 1'b1;
    end else begin
        res_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((icmp_ln484_fu_217_p2 == 1'd0) & (data_V_V_empty_n == 1'b0)) & (icmp_ln484_fu_217_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((icmp_ln484_fu_217_p2 == 1'd0) & (data_V_V_empty_n == 1'b0)) & (icmp_ln484_fu_217_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((data_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((data_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((data_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((data_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((data_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((data_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((data_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (((1'd0 == and_ln498_4_reg_1062) & (icmp_ln526_fu_549_p2 == 1'd1) & (icmp_ln522_fu_509_p2 == 1'd1)) | ((icmp_ln526_fu_549_p2 == 1'd1) & (icmp_ln522_fu_509_p2 == 1'd1) & (icmp_ln500_fu_293_p2 == 1'd1))))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else if (((1'b1 == ap_CS_fsm_state10) & (((icmp_ln526_fu_549_p2 == 1'd0) & (1'd0 == and_ln498_4_reg_1062) & (icmp_ln522_fu_509_p2 == 1'd1)) | ((icmp_ln526_fu_549_p2 == 1'd0) & (icmp_ln522_fu_509_p2 == 1'd1) & (icmp_ln500_fu_293_p2 == 1'd1))))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else if (((1'b1 == ap_CS_fsm_state10) & (((icmp_ln522_fu_509_p2 == 1'd0) & (1'd0 == and_ln498_4_reg_1062)) | ((icmp_ln522_fu_509_p2 == 1'd0) & (icmp_ln500_fu_293_p2 == 1'd1))))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            if ((~((res_V_V_full_n == 1'b0) & (icmp_ln512_fu_838_p2 == 1'd1)) & (1'b1 == ap_CS_fsm_state19) & (icmp_ln512_fu_838_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else if ((~((res_V_V_full_n == 1'b0) & (icmp_ln512_fu_838_p2 == 1'd1)) & (icmp_ln512_fu_838_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln530_fu_554_p2 = (pY_12_load_reg_1050 + 32'd1);

assign add_ln532_fu_565_p2 = (sY_12_load_reg_1040 + 32'd1);

assign add_ln535_fu_514_p2 = (pX_12_load_reg_1056 + 32'd1);

assign add_ln537_fu_525_p2 = (sX_12_load_reg_1030 + 32'd1);

assign and_ln1494_fu_955_p2 = (lshr_ln1494_reg_1257 & lshr_ln1494_5_fu_949_p2);

assign and_ln203_13_fu_801_p2 = (lshr_ln203_31_fu_795_p2 & lshr_ln203_30_reg_1208);

assign and_ln203_14_fu_783_p2 = (lshr_ln203_33_fu_777_p2 & lshr_ln203_32_reg_1197);

assign and_ln203_15_fu_819_p2 = (lshr_ln203_35_fu_813_p2 & lshr_ln203_34_reg_1218);

assign and_ln203_fu_765_p2 = (lshr_ln203_reg_1192 & lshr_ln203_29_fu_759_p2);

assign and_ln498_3_fu_281_p2 = (icmp_ln498_6_fu_269_p2 & icmp_ln498_5_fu_259_p2);

assign and_ln498_4_fu_287_p2 = (and_ln498_fu_275_p2 & and_ln498_3_fu_281_p2);

assign and_ln498_fu_275_p2 = (icmp_ln498_fu_239_p2 & icmp_ln498_4_fu_249_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (real_start == 1'b0));
end

always @ (*) begin
    ap_block_state19 = ((res_V_V_full_n == 1'b0) & (icmp_ln512_fu_838_p2 == 1'd1));
end

always @ (*) begin
    ap_block_state2 = ((icmp_ln484_fu_217_p2 == 1'd0) & (data_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_condition_224 = (((icmp_ln522_fu_509_p2 == 1'd0) & (1'd0 == and_ln498_4_reg_1062)) | ((icmp_ln522_fu_509_p2 == 1'd0) & (icmp_ln500_fu_293_p2 == 1'd1)));
end

always @ (*) begin
    ap_condition_235 = (((icmp_ln526_fu_549_p2 == 1'd0) & (1'd0 == and_ln498_4_reg_1062) & (icmp_ln522_fu_509_p2 == 1'd1)) | ((icmp_ln526_fu_549_p2 == 1'd0) & (icmp_ln522_fu_509_p2 == 1'd1) & (icmp_ln500_fu_293_p2 == 1'd1)));
end

always @ (*) begin
    ap_condition_388 = (((1'd0 == and_ln498_4_reg_1062) & (icmp_ln526_fu_549_p2 == 1'd1) & (icmp_ln522_fu_509_p2 == 1'd1)) | ((icmp_ln526_fu_549_p2 == 1'd1) & (icmp_ln522_fu_509_p2 == 1'd1) & (icmp_ln500_fu_293_p2 == 1'd1)));
end

always @ (*) begin
    ap_condition_395 = (((1'd0 == and_ln498_4_reg_1062) & (icmp_ln522_fu_509_p2 == 1'd1)) | ((icmp_ln522_fu_509_p2 == 1'd1) & (icmp_ln500_fu_293_p2 == 1'd1)));
end

assign ap_ready = internal_ap_ready;

assign empty_133_fu_305_p1 = i1_0_reg_138[2:0];

assign empty_134_fu_317_p2 = (tmp_s_fu_309_p3 | 8'd31);

assign empty_135_fu_598_p2 = (tmp_10_fu_591_p3 | 9'd31);

assign empty_136_fu_421_p2 = (tmp_11_fu_411_p4 | 10'd31);

assign empty_137_fu_672_p1 = tmp_10_fu_591_p3;

assign empty_139_fu_844_p1 = i_0_reg_160[1:0];

assign empty_140_fu_856_p2 = (tmp_12_fu_848_p3 | 7'd31);

assign grp_fu_586_p1 = select_ln203_46_reg_1085;

assign grp_fu_667_p1 = select_ln203_52_reg_1110;

assign grp_fu_743_p1 = select_ln203_49_reg_1152;

assign grp_fu_751_p1 = select_ln203_55_reg_1172;

assign grp_fu_941_p1 = select_ln1494_10_reg_1237;

assign i1_fu_299_p2 = (i1_0_reg_138 + 4'd1);

assign i_fu_932_p2 = (3'd1 + i_0_reg_160);

assign i_ih_fu_223_p2 = (i_ih_0_reg_127 + 4'd1);

assign icmp_ln1494_5_fu_862_p2 = ((tmp_12_fu_848_p3 > empty_140_fu_856_p2) ? 1'b1 : 1'b0);

assign icmp_ln1494_fu_964_p2 = (($signed(trunc_ln1494_reg_1262) > $signed(tmp_V_93_reg_149)) ? 1'b1 : 1'b0);

assign icmp_ln203_13_fu_604_p2 = ((tmp_10_fu_591_p3 > empty_135_fu_598_p2) ? 1'b1 : 1'b0);

assign icmp_ln203_14_fu_427_p2 = ((tmp_11_fu_411_p4 > empty_136_fu_421_p2) ? 1'b1 : 1'b0);

assign icmp_ln203_15_fu_680_p2 = ((tmp_10_fu_591_p3 > empty_135_fu_598_p2) ? 1'b1 : 1'b0);

assign icmp_ln203_fu_323_p2 = ((tmp_s_fu_309_p3 > empty_134_fu_317_p2) ? 1'b1 : 1'b0);

assign icmp_ln484_fu_217_p2 = ((i_ih_0_reg_127 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln498_4_fu_249_p2 = ((sY_12 == 32'd1) ? 1'b1 : 1'b0);

assign icmp_ln498_5_fu_259_p2 = (($signed(pY_12) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln498_6_fu_269_p2 = (($signed(pX_12) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln498_fu_239_p2 = ((sX_12 == 32'd1) ? 1'b1 : 1'b0);

assign icmp_ln500_fu_293_p2 = ((i1_0_reg_138 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln512_fu_838_p2 = ((i_0_reg_160 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln522_fu_509_p2 = ((pX_12_load_reg_1056 == 32'd2) ? 1'b1 : 1'b0);

assign icmp_ln526_fu_549_p2 = ((pY_12_load_reg_1050 == 32'd2) ? 1'b1 : 1'b0);

assign lshr_ln1494_5_fu_949_p2 = 128'd340282366920938463463374607431768211455 >> zext_ln1494_15_fu_946_p1;

assign lshr_ln203_29_fu_759_p2 = 1024'd179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137215 >> zext_ln203_63_fu_756_p1;

assign lshr_ln203_31_fu_795_p2 = 1024'd179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137215 >> zext_ln203_67_fu_792_p1;

assign lshr_ln203_33_fu_777_p2 = 1024'd179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137215 >> zext_ln203_71_fu_774_p1;

assign lshr_ln203_35_fu_813_p2 = 1024'd179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137215 >> zext_ln203_75_fu_810_p1;

assign p_cast1_fu_676_p1 = empty_135_fu_598_p2;

assign pool_V_fu_828_p5 = {{{{trunc_ln203_15_fu_824_p1}, {trunc_ln203_14_reg_1213}}, {trunc_ln203_13_fu_806_p1}}, {pool_res_V_reg_1202}};

assign pool_res_V_5_fu_969_p3 = ((icmp_ln1494_fu_964_p2[0:0] === 1'b1) ? trunc_ln1494_reg_1262 : tmp_V_93_reg_149);

assign pool_res_V_fu_770_p1 = and_ln203_fu_765_p2[31:0];

assign res_V_V_din = tmp_V_93_reg_149;

assign select_ln1494_10_fu_918_p3 = ((icmp_ln1494_5_fu_862_p2[0:0] === 1'b1) ? xor_ln1494_fu_891_p2 : zext_ln1494_fu_868_p1);

assign select_ln1494_9_fu_911_p3 = ((icmp_ln1494_5_fu_862_p2[0:0] === 1'b1) ? tmp_28_fu_876_p4 : pool_V_reg_1223);

assign select_ln1494_fu_903_p3 = ((icmp_ln1494_5_fu_862_p2[0:0] === 1'b1) ? sub_ln1494_fu_885_p2 : sub_ln1494_9_fu_897_p2);

assign select_ln203_45_fu_373_p3 = ((icmp_ln203_fu_323_p2[0:0] === 1'b1) ? tmp_24_fu_337_p4 : layer_in_V_24);

assign select_ln203_46_fu_381_p3 = ((icmp_ln203_fu_323_p2[0:0] === 1'b1) ? xor_ln203_17_fu_353_p2 : zext_ln203_fu_329_p1);

assign select_ln203_47_fu_636_p3 = ((icmp_ln203_13_fu_604_p2[0:0] === 1'b1) ? sub_ln203_47_fu_618_p2 : sub_ln203_48_fu_630_p2);

assign select_ln203_48_fu_644_p3 = ((icmp_ln203_13_fu_604_p2[0:0] === 1'b1) ? tmp_25_reg_1100 : layer_in_V_24_load_1_reg_1074);

assign select_ln203_49_fu_650_p3 = ((icmp_ln203_13_fu_604_p2[0:0] === 1'b1) ? xor_ln203_18_fu_624_p2 : zext_ln203_64_fu_610_p1);

assign select_ln203_50_fu_469_p3 = ((icmp_ln203_14_fu_427_p2[0:0] === 1'b1) ? sub_ln203_50_fu_451_p2 : sub_ln203_51_fu_463_p2);

assign select_ln203_51_fu_477_p3 = ((icmp_ln203_14_fu_427_p2[0:0] === 1'b1) ? tmp_26_fu_441_p4 : layer_in_V_24);

assign select_ln203_52_fu_485_p3 = ((icmp_ln203_14_fu_427_p2[0:0] === 1'b1) ? xor_ln203_19_fu_457_p2 : zext_ln203_68_fu_433_p1);

assign select_ln203_53_fu_712_p3 = ((icmp_ln203_15_fu_680_p2[0:0] === 1'b1) ? sub_ln203_53_fu_694_p2 : sub_ln203_54_fu_706_p2);

assign select_ln203_54_fu_720_p3 = ((icmp_ln203_15_fu_680_p2[0:0] === 1'b1) ? tmp_27_reg_1120 : layer_in_V_24_load_1_reg_1074);

assign select_ln203_55_fu_726_p3 = ((icmp_ln203_15_fu_680_p2[0:0] === 1'b1) ? xor_ln203_20_fu_700_p2 : zext_ln203_72_fu_686_p1);

assign select_ln203_fu_365_p3 = ((icmp_ln203_fu_323_p2[0:0] === 1'b1) ? sub_ln203_fu_347_p2 : sub_ln203_45_fu_359_p2);

assign select_ln532_fu_570_p3 = ((icmp_ln498_4_reg_1045[0:0] === 1'b1) ? 32'd0 : add_ln532_fu_565_p2);

assign select_ln537_fu_530_p3 = ((icmp_ln498_reg_1035[0:0] === 1'b1) ? 32'd0 : add_ln537_fu_525_p2);

assign start_out = real_start;

assign sub_ln1494_10_fu_926_p2 = (8'd127 - select_ln1494_fu_903_p3);

assign sub_ln1494_9_fu_897_p2 = (zext_ln1494_13_fu_872_p1 - zext_ln1494_fu_868_p1);

assign sub_ln1494_fu_885_p2 = (zext_ln1494_fu_868_p1 - zext_ln1494_13_fu_872_p1);

assign sub_ln203_45_fu_359_p2 = (zext_ln203_61_fu_333_p1 - zext_ln203_fu_329_p1);

assign sub_ln203_46_fu_389_p2 = (11'd1023 - select_ln203_fu_365_p3);

assign sub_ln203_47_fu_618_p2 = (zext_ln203_64_fu_610_p1 - zext_ln203_65_fu_614_p1);

assign sub_ln203_48_fu_630_p2 = (zext_ln203_65_fu_614_p1 - zext_ln203_64_fu_610_p1);

assign sub_ln203_49_fu_658_p2 = (11'd1023 - select_ln203_47_fu_636_p3);

assign sub_ln203_50_fu_451_p2 = (zext_ln203_68_fu_433_p1 - zext_ln203_69_fu_437_p1);

assign sub_ln203_51_fu_463_p2 = (zext_ln203_69_fu_437_p1 - zext_ln203_68_fu_433_p1);

assign sub_ln203_52_fu_493_p2 = (11'd1023 - select_ln203_50_fu_469_p3);

assign sub_ln203_53_fu_694_p2 = (zext_ln203_72_fu_686_p1 - zext_ln203_73_fu_690_p1);

assign sub_ln203_54_fu_706_p2 = (zext_ln203_73_fu_690_p1 - zext_ln203_72_fu_686_p1);

assign sub_ln203_55_fu_734_p2 = (11'd1023 - select_ln203_53_fu_712_p3);

assign sub_ln203_fu_347_p2 = (zext_ln203_fu_329_p1 - zext_ln203_61_fu_333_p1);

assign tmp_10_fu_591_p3 = {{xor_ln203_reg_1095}, {5'd0}};

assign tmp_11_fu_411_p4 = {{{{1'd1}, {i1_0_reg_138}}}, {5'd0}};

assign tmp_12_fu_848_p3 = {{empty_139_fu_844_p1}, {5'd0}};

integer ap_tvar_int_0;

always @ (layer_in_V_24) begin
    for (ap_tvar_int_0 = 1024 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 1023 - 0) begin
            tmp_24_fu_337_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_24_fu_337_p4[ap_tvar_int_0] = layer_in_V_24[1023 - ap_tvar_int_0];
        end
    end
end

integer ap_tvar_int_1;

always @ (layer_in_V_24) begin
    for (ap_tvar_int_1 = 1024 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 1023 - 0) begin
            tmp_25_fu_401_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tmp_25_fu_401_p4[ap_tvar_int_1] = layer_in_V_24[1023 - ap_tvar_int_1];
        end
    end
end

integer ap_tvar_int_2;

always @ (layer_in_V_24) begin
    for (ap_tvar_int_2 = 1024 - 1; ap_tvar_int_2 >= 0; ap_tvar_int_2 = ap_tvar_int_2 - 1) begin
        if (ap_tvar_int_2 > 1023 - 0) begin
            tmp_26_fu_441_p4[ap_tvar_int_2] = 1'b0;
        end else begin
            tmp_26_fu_441_p4[ap_tvar_int_2] = layer_in_V_24[1023 - ap_tvar_int_2];
        end
    end
end

integer ap_tvar_int_3;

always @ (layer_in_V_24) begin
    for (ap_tvar_int_3 = 1024 - 1; ap_tvar_int_3 >= 0; ap_tvar_int_3 = ap_tvar_int_3 - 1) begin
        if (ap_tvar_int_3 > 1023 - 0) begin
            tmp_27_fu_499_p4[ap_tvar_int_3] = 1'b0;
        end else begin
            tmp_27_fu_499_p4[ap_tvar_int_3] = layer_in_V_24[1023 - ap_tvar_int_3];
        end
    end
end

integer ap_tvar_int_4;

always @ (pool_V_reg_1223) begin
    for (ap_tvar_int_4 = 128 - 1; ap_tvar_int_4 >= 0; ap_tvar_int_4 = ap_tvar_int_4 - 1) begin
        if (ap_tvar_int_4 > 127 - 0) begin
            tmp_28_fu_876_p4[ap_tvar_int_4] = 1'b0;
        end else begin
            tmp_28_fu_876_p4[ap_tvar_int_4] = pool_V_reg_1223[127 - ap_tvar_int_4];
        end
    end
end

assign tmp_s_fu_309_p3 = {{empty_133_fu_305_p1}, {5'd0}};

assign trunc_ln1494_fu_960_p1 = and_ln1494_fu_955_p2[31:0];

assign trunc_ln203_13_fu_806_p1 = and_ln203_13_fu_801_p2[31:0];

assign trunc_ln203_14_fu_788_p1 = and_ln203_14_fu_783_p2[31:0];

assign trunc_ln203_15_fu_824_p1 = and_ln203_15_fu_819_p2[31:0];

assign xor_ln1494_fu_891_p2 = (zext_ln1494_fu_868_p1 ^ 8'd127);

assign xor_ln203_17_fu_353_p2 = (zext_ln203_fu_329_p1 ^ 11'd1023);

assign xor_ln203_18_fu_624_p2 = (zext_ln203_64_fu_610_p1 ^ 11'd1023);

assign xor_ln203_19_fu_457_p2 = (zext_ln203_68_fu_433_p1 ^ 11'd1023);

assign xor_ln203_20_fu_700_p2 = (zext_ln203_72_fu_686_p1 ^ 11'd1023);

assign xor_ln203_fu_395_p2 = (i1_0_reg_138 ^ 4'd8);

assign zext_ln1494_13_fu_872_p1 = empty_140_fu_856_p2;

assign zext_ln1494_15_fu_946_p1 = sub_ln1494_10_reg_1242;

assign zext_ln1494_fu_868_p1 = tmp_12_fu_848_p3;

assign zext_ln203_61_fu_333_p1 = empty_134_fu_317_p2;

assign zext_ln203_63_fu_756_p1 = sub_ln203_46_reg_1090;

assign zext_ln203_64_fu_610_p1 = $unsigned(tmp_10_fu_591_p3);

assign zext_ln203_65_fu_614_p1 = $unsigned(empty_135_fu_598_p2);

assign zext_ln203_67_fu_792_p1 = sub_ln203_49_reg_1157;

assign zext_ln203_68_fu_433_p1 = tmp_11_fu_411_p4;

assign zext_ln203_69_fu_437_p1 = empty_136_fu_421_p2;

assign zext_ln203_71_fu_774_p1 = sub_ln203_52_reg_1115;

assign zext_ln203_72_fu_686_p1 = $unsigned(empty_137_fu_672_p1);

assign zext_ln203_73_fu_690_p1 = $unsigned(p_cast1_fu_676_p1);

assign zext_ln203_75_fu_810_p1 = sub_ln203_55_reg_1177;

assign zext_ln203_fu_329_p1 = tmp_s_fu_309_p3;

always @ (posedge ap_clk) begin
    sub_ln203_46_reg_1090[0] <= 1'b0;
    sub_ln203_52_reg_1115[0] <= 1'b0;
    sub_ln203_49_reg_1157[0] <= 1'b0;
    sub_ln203_55_reg_1177[0] <= 1'b0;
    sub_ln1494_10_reg_1242[0] <= 1'b0;
end

endmodule //pooling2d_large_cl_nopad_pad_me
